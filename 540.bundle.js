(()=>{"use strict";const t=Symbol("Comlink.proxy"),n=Symbol("Comlink.endpoint"),e=Symbol("Comlink.releaseProxy"),r=Symbol("Comlink.thrown"),o=t=>"object"==typeof t&&null!==t||"function"==typeof t,a=new Map([["proxy",{canHandle:n=>o(n)&&n[t],serialize(t){const{port1:n,port2:e}=new MessageChannel;return i(t,n),[e,[e]]},deserialize:t=>(t.start(),c(t,[],undefined))}],["throw",{canHandle:t=>o(t)&&r in t,serialize({value:t}){let n;return n=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[n,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function i(n,e=self){e.addEventListener("message",(function o(a){if(!a||!a.data)return;const{id:u,type:c,path:l}=Object.assign({path:[]},a.data),h=(a.data.argumentList||[]).map(y);let d;try{const e=l.slice(0,-1).reduce(((t,n)=>t[n]),n),r=l.reduce(((t,n)=>t[n]),n);switch(c){case"GET":d=r;break;case"SET":e[l.slice(-1)[0]]=y(a.data.value),d=!0;break;case"APPLY":d=r.apply(e,h);break;case"CONSTRUCT":d=function(n){return Object.assign(n,{[t]:!0})}(new r(...h));break;case"ENDPOINT":{const{port1:t,port2:e}=new MessageChannel;i(n,e),d=function(t,n){return p.set(t,n),t}(t,[t])}break;case"RELEASE":d=void 0;break;default:return}}catch(t){d={value:t,[r]:0}}Promise.resolve(d).catch((t=>({value:t,[r]:0}))).then((t=>{const[n,r]=f(t);e.postMessage(Object.assign(Object.assign({},n),{id:u}),r),"RELEASE"===c&&(e.removeEventListener("message",o),s(e))}))})),e.start&&e.start()}function s(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function u(t){if(t)throw new Error("Proxy has been released and is not useable")}function c(t,r=[],o=function(){}){let a=!1;const i=new Proxy(o,{get(n,o){if(u(a),o===e)return()=>h(t,{type:"RELEASE",path:r.map((t=>t.toString()))}).then((()=>{s(t),a=!0}));if("then"===o){if(0===r.length)return{then:()=>i};const n=h(t,{type:"GET",path:r.map((t=>t.toString()))}).then(y);return n.then.bind(n)}return c(t,[...r,o])},set(n,e,o){u(a);const[i,s]=f(o);return h(t,{type:"SET",path:[...r,e].map((t=>t.toString())),value:i},s).then(y)},apply(e,o,i){u(a);const s=r[r.length-1];if(s===n)return h(t,{type:"ENDPOINT"}).then(y);if("bind"===s)return c(t,r.slice(0,-1));const[p,f]=l(i);return h(t,{type:"APPLY",path:r.map((t=>t.toString())),argumentList:p},f).then(y)},construct(n,e){u(a);const[o,i]=l(e);return h(t,{type:"CONSTRUCT",path:r.map((t=>t.toString())),argumentList:o},i).then(y)}});return i}function l(t){const n=t.map(f);return[n.map((t=>t[0])),(e=n.map((t=>t[1])),Array.prototype.concat.apply([],e))];var e}const p=new WeakMap;function f(t){for(const[n,e]of a)if(e.canHandle(t)){const[r,o]=e.serialize(t);return[{type:"HANDLER",name:n,value:r},o]}return[{type:"RAW",value:t},p.get(t)||[]]}function y(t){switch(t.type){case"HANDLER":return a.get(t.name).deserialize(t.value);case"RAW":return t.value}}function h(t,n,e){return new Promise((r=>{const o=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.addEventListener("message",(function n(e){e.data&&e.data.id&&e.data.id===o&&(t.removeEventListener("message",n),r(e.data))})),t.start&&t.start(),t.postMessage(Object.assign({id:o},n),e)}))}var d,g=function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,a=e.call(t),i=[];try{for(;(void 0===n||n-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}return i},v=function(t,n,e){if(e||2===arguments.length)for(var r,o=0,a=n.length;o<a;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))};function m(t){for(var n=[],e=1;e<arguments.length;e++)n[e-1]=arguments[e];var r=t!==d.Debug;r&&(t===d.Error?console.error.apply(console,v([],g(n),!1)):console.log.apply(console,v([],g(n),!1)))}!function(t){t[t.Debug=0]="Debug",t[t.Error=1]="Error",t[t.Important=2]="Important"}(d||(d={}));var b,E=function(){function t(){this.onEvent=function(){}}return t.prototype.launch=function(t,n,e){var r=function(t,n){if(t&&n){var e=new TextDecoder;return function(){for(;"timed-out"===Atomics.wait(n,0,0,100););Atomics.store(n,0,0);var r=Atomics.exchange(n,1,0),o=t.slice(0,r);return e.decode(o)}}return function(){var t=new XMLHttpRequest;do{t.open("GET","/__papyros_input",!1),t.send(null)}while(t.status>=400);return t.responseText}}(n,e);return this.onEvent=function(n){if(t(n),"input"===n.type)return r()},Promise.resolve()},t.prototype.runCode=function(t){return n=this,e=void 0,o=function(){var n,e,r;return function(t,n){var e,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(e)throw new TypeError("Generator is already executing.");for(;i;)try{if(e=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(t,i)}catch(t){a=[6,t],r=0}finally{e=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}(this,(function(o){switch(o.label){case 0:m(d.Debug,"Running code in worker: ",t),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,this._runCodeInternal(t)];case 2:return n=o.sent(),m(d.Important,"ran code: "+t+" and received: ",n),[2,this.onEvent({type:"success",data:n})];case 3:return e=o.sent(),r="toString"in e?e.toString():JSON.stringify(e),m(d.Error,"Error during execution: ",e,r),[2,this.onEvent({type:"error",data:r})];case 4:return[2]}}))},new((r=void 0)||(r=Promise))((function(t,a){function i(t){try{u(o.next(t))}catch(t){a(t)}}function s(t){try{u(o.throw(t))}catch(t){a(t)}}function u(n){var e;n.done?t(n.value):(e=n.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,s)}u((o=o.apply(n,e||[])).next())}));var n,e,r,o},t}(),w=(b=function(t,n){return b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},b(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}b(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),S=function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,a=e.call(t),i=[];try{for(;(void 0===n||n-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}return i};i(new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return w(n,t),n.prototype._runCodeInternal=function(t){var n,e,r=new Map([["prompt","__prompt"],["console.log","__papyros_log"],["console.error","__papyros_error"]]),o={__onEvent:this.onEvent.bind(this)},a=[],i=[];for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&i.push("const "+s+" = ctx['"+s+"'];");try{for(var u=function(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}(r.entries()),c=u.next();!c.done;c=u.next()){var l=S(c.value,2),p=l[0],f=l[1];i.push(f+" = "+p),a.push(p+" = "+f)}}catch(t){n={error:t}}finally{try{c&&!c.done&&(e=u.return)&&e.call(u)}finally{if(n)throw n.error}}i.push('\nfunction prompt(text="", defaultText=""){\n    __onEvent({"type": "output", "data": text});\n    const promptedValue = __onEvent({"type": "input", "data": text});\n    __onEvent({"type": "output", "data": promptedValue + "\\n"});\n    return promptedValue;\n}\nfunction __stringify(args, addNewline=false){\n    let asString = "";\n    if(Array.isArray(args)){\n        if(args.length === 1){\n            asString = JSON.stringify(args[0]);\n        } else {\n            asString = args.map(s => {\n                if(typeof s === \'string\' || s instanceof String){\n                    return s; // prevent spurious quotes\n                } else {\n                    return JSON.stringify(s);\n                }\n            }).join(" ");\n        }\n    } else {\n        asString = JSON.stringify(args);\n    }\n    if(addNewline){\n        asString += "\\n";\n    }\n    return asString;\n}\nconsole.log = (...args) => {\n    __onEvent({"type": "output", "data": __stringify(args, true)});\n}\nconsole.error = (...args) => {\n    __onEvent({"type": "error", "data": __stringify(args, true)});\n}\n        '),i.push("\ntry {\n"+t+"\n} finally {\n"+a.join("\n")+"\n}\n        ");var y=i.join("\n");return Promise.resolve(new Function("ctx",y)(o))},n}(E)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,