import { Backend } from "./Backend";
import { INITIALIZATION_CODE } from "./backend.py";
import { PapyrosEvent } from "./PapyrosEvent";

const WORKER_PATH = "./PyodideWebWorker.js";
export class PythonBackend implements Backend {
    pyodideWorker: Worker;
    sharedBuffer: Int32Array;
    //pyodide: Pyodide;

    constructor(){
      const shared = new SharedArrayBuffer(4);
      this.sharedBuffer = new Int32Array(shared);
      this.pyodideWorker = new Worker(WORKER_PATH);
      //this.pyodide = {} as Pyodide;
    }

    async launch(onData: (e: any) => void){
        /*this.pyodide = await window.loadPyodide({
            indexURL : "https://cdn.jsdelivr.net/pyodide/v0.18.1/full/",
            fullStdLib: true // default
          });
          */
        await this.runCode(INITIALIZATION_CODE, (e) => {});
    }

    translate(code: string): string {
      const inputRegex = /(:?^|\s+)input\(/g;
      const outputRegex = "$1await input(";
      if(code){
        code = code.replace(inputRegex, outputRegex );
      }
      return code;
    }

    async runCode(code: string){
        return new Promise((onSuccess, onError) => {
          this.pyodideWorker.onerror = onError;
          this.pyodideWorker.onmessage = (e) => {
              const event = e.data;
              console.log("Received message in runCode", event);
              /*if(event.type === "success"){
                onSuccess(event.data)
              } else {
                onMessage(event);
              }*/
            };
          this.pyodideWorker.postMessage({
            type: "script",
            python: this.translate(code),
          });
        });
        /*return this.pyodide.loadPackagesFromImports(code)
            .then(() => this.pyodide.runPythonAsync(code));*/
    }

    async shutdown(){
        return Promise.resolve();
    }

    async terminateExecution(){
        this.pyodideWorker.terminate();
    }

    send(data: PapyrosEvent){
      console.log("Posting data in send: ", data);
      this.pyodideWorker.postMessage(data);
    }
}