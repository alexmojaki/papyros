(()=>{"use strict";var e,n,t={572:(e,n,t)=>{var r,o=t(375),i=t(872),s="__init_papyros",a="__process_code",l='\nfrom pyodide import to_js, eval_code_async\nfrom js import console\nimport sys\nimport ast\nimport json\nimport html\nimport micropip\nawait micropip.install(\'friendly_traceback\')\nimport friendly_traceback\nfrom friendly_traceback.core import FriendlyTraceback\n\n__papyros = None\n\nclass __Papyros():\n    def __init__(self, cb):\n        self.cb = cb\n        self.line = ""\n        self.override_builtins()\n\n    def message(self, data):\n        return self.cb(to_js(data))\n\n    def override_builtins(self):\n        self.override_output()\n        self.override_input()\n\n    def override_output(self):\n        class __OutputWriter:\n            def __init__(self, type, on_write):\n                self.encoding = "utf-8"\n                self.type = type\n                self.on_write = on_write\n                \n            def write(self, s):\n                self.on_write(dict(type=self.type, data=s))\n\n            def flush(self):\n                pass # Given data is always immediately written\n        on_write = lambda d: self.message(d)\n        sys.stdout = __OutputWriter("output", on_write)\n        sys.stderr = __OutputWriter("error", on_write)\n\n    def readline(self, n=-1, prompt=""):\n        if not self.line:\n            self.line = self.message(dict(type="input", data=prompt)) + "\\n"\n        if n < 0 or n > len(self.line):\n            n = len(self.line)\n        to_return = self.line[0:n]\n        self.line = self.line[n:]\n        return to_return\n\n    def override_input(self):\n        global input\n        input = lambda prompt="": self.readline(prompt=prompt)[:-1] # Remove newline\n\n        sys.stdin.readline = self.readline\n\ndef clean_traceback(tb, filename):\n    # For some reason the first character of __file__ is lost in friendly_traceback\n    for prefix in ["\\"", "\\\'", " "]:\n        tb = tb.replace(prefix + filename[1:], prefix + filename)\n    return html.escape(tb)\n\ndef format_exception(filename, exc):\n    fr = FriendlyTraceback(type(exc), exc, exc.__traceback__)\n    fr.assign_generic()\n    fr.assign_cause()\n    tb = fr.info.get("simulated_python_traceback", "No traceback")\n    info = fr.info.get("generic", "No information available.")\n    why = fr.info.get("cause", "Unknown cause")\n    suggestions = fr.info.get("suggest", "No suggestions")\n    what = fr.info.get("message", "No message")\n    user_start = 0\n    tb_lines = tb.split("\\n")\n    while user_start < len(tb_lines) and filename not in tb_lines[user_start]:\n        user_start += 1\n    name = type(exc).__name__\n    user_end = user_start + 1\n    while user_end < len(tb_lines) and name not in tb_lines[user_end]:\n        user_end += 1\n    where = "\\n".join(tb_lines[user_start:user_end]) or "No location"\n    return json.dumps(\n        dict(\n            name=name,\n            traceback=tb,\n            info=info,\n            why=why,\n            where=where,\n            what=what,\n            suggestions=suggestions\n        )\n    )\n\ndef '.concat(s,'(cb):\n    globals()["__name__"] = "__main__"\n    global __papyros\n    __papyros = __Papyros(cb)\n\nasync def ').concat(a,'(code, run, filename="my_code.py"):\n    with open(filename, "w") as f:\n        f.write(code)\n    globals()["__file__"] = filename\n    try:\n        if run:\n            await eval_code_async(code, globals(), filename=filename)\n        else:\n            compile(code, filename, mode="exec", flags=ast.PyCF_ALLOW_TOP_LEVEL_AWAIT)\n        return True\n    except Exception as e:\n        global __papyros\n        __papyros.message(dict(type="error", data=format_exception(filename, e)))\n        return False\n\n'),c=(r=function(e,n){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},r(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),f=function(e,n,t,r){return new(t||(t=Promise))((function(o,i){function s(e){try{l(r.next(e))}catch(e){i(e)}}function a(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,a)}l((r=r.apply(e,n||[])).next())}))},u=function(e,n){var t,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(e,s)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};importScripts("https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js");var p=function(e){function n(){var n=e.call(this)||this;return n.pyodide={},n.initialized=!1,n.globals=new Map,n}return c(n,e),n.prototype.launch=function(n,t,r){return f(this,void 0,void 0,(function(){var o,i,a=this;return u(this,(function(c){switch(c.label){case 0:return[4,e.prototype.launch.call(this,n,t,r)];case 1:return c.sent(),o=this,[4,loadPyodide({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/",fullStdLib:!1})];case 2:return o.pyodide=c.sent(),[4,this.runCode(l,0)];case 3:return c.sent(),i=function(e){var n="toJs"in e?e.toJs():Object.fromEntries(e);return a.onEvent(n)},this.pyodide.globals.get(s)(i),this.globals=new Map(this.pyodide.globals.toJs()),this.initialized=!0,[2]}}))}))},n.prototype._cleanScope=function(){var e,n,t=this.pyodide.globals,r=[];try{for(var o=function(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}(t.keys()),i=o.next();!i.done;i=o.next()){var s=i.value;this.globals.has(s)?t.set(s,this.globals.get(s)):r.push(s)}}catch(n){e={error:n}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}r.forEach((function(e){return t.delete(e)}))},n.prototype._runCodeInternal=function(e){return f(this,void 0,void 0,(function(){return u(this,(function(n){switch(n.label){case 0:return this.initialized?[4,this.pyodide.globals.get(a)(e,!1)]:[3,5];case 1:return n.sent()?[4,this.pyodide.loadPackagesFromImports(e)]:[3,4];case 2:return n.sent(),[4,this.pyodide.globals.get(a)(e,!0)];case 3:n.sent(),n.label=4;case 4:return this._cleanScope(),[3,7];case 5:return[4,this.pyodide.loadPackagesFromImports(e)];case 6:return n.sent(),[2,this.pyodide.runPythonAsync(e)];case 7:return[2]}}))}))},n}(i.z);(0,o.Jj)(new p)}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,o),i.exports}o.m=t,o.x=()=>{var e=o.O(void 0,[114],(()=>o(572)));return o.O(e)},e=[],o.O=(n,t,r,i)=>{if(!t){var s=1/0;for(f=0;f<e.length;f++){for(var[t,r,i]=e[f],a=!0,l=0;l<t.length;l++)(!1&i||s>=i)&&Object.keys(o.O).every((e=>o.O[e](t[l])))?t.splice(l--,1):(a=!1,i<s&&(s=i));if(a){e.splice(f--,1);var c=r();void 0!==c&&(n=c)}}return n}i=i||0;for(var f=e.length;f>0&&e[f-1][2]>i;f--)e[f]=e[f-1];e[f]=[t,r,i]},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((n,t)=>(o.f[t](e,n),n)),[])),o.u=e=>e+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={572:1};o.f.i=(n,t)=>{e[n]||importScripts(o.p+o.u(n))};var n=self.webpackChunkpapyros=self.webpackChunkpapyros||[],t=n.push.bind(n);n.push=n=>{var[r,i,s]=n;for(var a in i)o.o(i,a)&&(o.m[a]=i[a]);for(s&&s(o);r.length;)e[r.pop()]=1;t(n)}})(),n=o.x,o.x=()=>o.e(114).then(n),o.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,