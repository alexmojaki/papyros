(()=>{"use strict";var t,n,e={572:(t,n,e)=>{var r,o=e(375),i=e(872),a=(r=function(t,n){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},r(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),s=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function a(t){try{p(r.next(t))}catch(t){i(t)}}function s(t){try{p(r.throw(t))}catch(t){i(t)}}function p(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,s)}p((r=r.apply(t,n||[])).next())}))},p=function(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};importScripts("https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js");var u=function(t){function n(){var n=t.call(this)||this;return n.pyodide={},n.initialized=!1,n.globals=new Map,n}return a(n,t),n.prototype.launch=function(n,e,r){return s(this,void 0,void 0,(function(){var o,i,a=this;return p(this,(function(s){switch(s.label){case 0:return[4,t.prototype.launch.call(this,n,e,r)];case 1:return s.sent(),[4,loadPyodide({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/",fullStdLib:!1})];case 2:return o=s.sent(),this.pyodide=o,[4,this.runCode('\nfrom pyodide import to_js\nimport sys\n\ndef __override_builtins(cb):\n    __capture_stdout(cb)\n    __override_stdin(cb)\n    # set name to main instead of builtins\n    globals()["__name__"] = "__main__"\n\ndef __capture_stdout(cb):\n    class _OutputWriter:\n        def __init__(self):\n            self.encoding = "utf-8"\n            \n        def write(self, s):\n            cb(to_js({"type": "output", "data":s}))\n\n        def flush(self):\n            pass # Given data is always immediately written\n\n    sys.stdout = _OutputWriter()\n\n__papyros_input = ""\ndef __override_stdin(cb):\n\n    def __papyros_input(prompt=""):\n        return __papyros_readline(prompt=prompt)[:-1] # Remove newline\n\n    def __papyros_readline(n=-1, prompt=""):\n        global __papyros_input\n        if not __papyros_input:\n            __papyros_input = cb(to_js({"type": "input", "data": prompt})) + "\\n"\n        if n < 0 or n > len(__papyros_input):\n            n = len(__papyros_input)\n        to_return = __papyros_input[0:n]\n        __papyros_input = __papyros_input[n:]\n        return to_return\n\n    global input\n    input = __papyros_input\n    sys.stdin.readline = __papyros_readline\n',0)];case 3:return s.sent(),i=function(t){var n="toJs"in t?t.toJs():Object.fromEntries(t);return a.onEvent(n)},this.pyodide.globals.get("__override_builtins")(i),this.globals=new Map(this.pyodide.globals.toJs()),this.initialized=!0,[2]}}))}))},n.prototype._cleanScope=function(){var t,n,e=this.pyodide.globals,r=[];try{for(var o=function(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}(e.keys()),i=o.next();!i.done;i=o.next()){var a=i.value;this.globals.has(a)?e.set(a,this.globals.get(a)):r.push(a)}}catch(n){t={error:n}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}r.forEach((function(t){return e.delete(t)}))},n.prototype._runCodeInternal=function(t){return s(this,void 0,void 0,(function(){var n;return p(this,(function(e){switch(e.label){case 0:return[4,this.pyodide.loadPackagesFromImports(t)];case 1:return e.sent(),this.initialized?(n=this.pyodide.runPython(t),this._cleanScope(),[2,n]):[2,this.pyodide.runPythonAsync(t)]}}))}))},n}(i.z);(0,o.Jj)(new u)}},r={};function o(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,o),i.exports}o.m=e,o.x=()=>{var t=o.O(void 0,[114],(()=>o(572)));return o.O(t)},t=[],o.O=(n,e,r,i)=>{if(!e){var a=1/0;for(l=0;l<t.length;l++){for(var[e,r,i]=t[l],s=!0,p=0;p<e.length;p++)(!1&i||a>=i)&&Object.keys(o.O).every((t=>o.O[t](e[p])))?e.splice(p--,1):(s=!1,i<a&&(a=i));if(s){t.splice(l--,1);var u=r();void 0!==u&&(n=u)}}return n}i=i||0;for(var l=t.length;l>0&&t[l-1][2]>i;l--)t[l]=t[l-1];t[l]=[e,r,i]},o.d=(t,n)=>{for(var e in n)o.o(n,e)&&!o.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},o.f={},o.e=t=>Promise.all(Object.keys(o.f).reduce(((n,e)=>(o.f[e](t,n),n)),[])),o.u=t=>t+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;o.g.importScripts&&(t=o.g.location+"");var n=o.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");e.length&&(t=e[e.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=t})(),(()=>{var t={572:1};o.f.i=(n,e)=>{t[n]||importScripts(o.p+o.u(n))};var n=self.webpackChunkpapyros=self.webpackChunkpapyros||[],e=n.push.bind(n);n.push=n=>{var[r,i,a]=n;for(var s in i)o.o(i,s)&&(o.m[s]=i[s]);for(a&&a(o);r.length;)t[r.pop()]=1;e(n)}})(),n=o.x,o.x=()=>o.e(114).then(n),o.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,