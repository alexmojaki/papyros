(()=>{"use strict";var e,n,t={572:(e,n,t)=>{var r,i=t(375),o=t(29),s=t(155),a="__init_papyros",l="__process_code",c='\nfrom pyodide import to_js, eval_code_async\nfrom js import console\nimport sys\nimport ast\nimport json\nimport html\nimport types\nimport os\nimport micropip\nawait micropip.install(\'friendly_traceback\')\nimport friendly_traceback\nfrom friendly_traceback.core import FriendlyTraceback\n\npapyros = None\n\nclass Papyros():\n    def __init__(self, cb):\n        self.cb = cb\n        self.line = ""\n        self.override_builtins()\n\n    def message(self, data):\n        return self.cb(to_js(data))\n\n    def override_builtins(self):\n        self.override_output()\n        self.override_input()\n\n    def override_output(self):\n        class OutputWriter:\n            def __init__(self, type, on_write, original):\n                self.encoding = "utf-8"\n                self.type = type\n                self.on_write = on_write\n                self.original = original\n                \n            def write(self, s):\n                if isinstance(s, bytes):\n                    s = s.decode("utf8", "replace")\n                self.on_write(dict(type=self.type, data=s))\n\n            def flush(self):\n                pass # Given data is always immediately written\n\n            def __getattr__(self, item):\n                return getattr(self.original, item)\n\n        on_write = lambda d: self.message(d)\n        sys.stdout = OutputWriter("output", on_write, sys.stdout)\n        sys.stderr = OutputWriter("error", on_write, sys.stderr)\n\n    def readline(self, n=-1, prompt=""):\n        if not self.line:\n            self.line = self.message(dict(type="input", data=prompt)) + "\\n"\n        if n < 0 or n > len(self.line):\n            n = len(self.line)\n        to_return = self.line[0:n]\n        self.line = self.line[n:]\n        return to_return\n\n    def globals(self, filename):\n        mod = types.ModuleType("__main__")\n        mod.__file__ = filename\n        sys.modules["__main__"] = mod\n        return mod.__dict__\n\n    def override_input(self):\n        sys.stdin.readline = self.readline\n        import builtins\n        builtins.input = lambda prompt="": self.readline(prompt=prompt)[:-1] # Remove newline\n\ndef format_exception(filename, exc):\n    fr = FriendlyTraceback(type(exc), exc, exc.__traceback__)\n    fr.assign_generic()\n    fr.assign_cause()\n    tb = fr.info.get("shortened_traceback", "No traceback")\n    info = fr.info.get("generic", "No information available.")\n    why = fr.info.get("cause", "Unknown cause")\n    what = fr.info.get("message", "No message")\n    user_start = 0\n    tb_lines = tb.split("\\n")\n    while user_start < len(tb_lines) and filename not in tb_lines[user_start]:\n        user_start += 1\n    name = type(exc).__name__\n    user_end = user_start + 1\n    while user_end < len(tb_lines) and name not in tb_lines[user_end]:\n        user_end += 1\n    where = "\\n".join(tb_lines[user_start:user_end]) or "No location"\n    return json.dumps(\n        dict(\n            name=name,\n            traceback=tb,\n            info=info,\n            why=why,\n            where=where,\n            what=what\n        )\n    )\n\ndef '.concat(a,"(cb):\n    global papyros\n    papyros = Papyros(cb)\n\nasync def ").concat(l,'(code, filename="my_code.py"):\n    with open(filename, "w") as f:\n        f.write(code)\n    friendly_traceback.source_cache.cache.add(filename, code)\n    try:\n        await eval_code_async(code, papyros.globals(filename),\n                filename=filename, return_mode="none")\n    except Exception as e:\n        papyros.message(dict(type="error", data=format_exception(filename, e)))\n\n'),f=(r=function(e,n){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},r(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),u=function(e,n,t,r){return new(t||(t=Promise))((function(i,o){function s(e){try{l(r.next(e))}catch(e){o(e)}}function a(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,a)}l((r=r.apply(e,n||[])).next())}))},p=function(e,n){var t,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=n.call(e,s)}catch(e){o=[6,e],r=0}finally{t=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};importScripts("https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js");var d=function(e){function n(){var n=e.call(this)||this;return n.pyodide={},n.initialized=!1,n}return f(n,e),n.prototype.launch=function(n,t,r){return u(this,void 0,void 0,(function(){var i,o,s=this;return p(this,(function(l){switch(l.label){case 0:return[4,e.prototype.launch.call(this,n,t,r)];case 1:return l.sent(),i=this,[4,loadPyodide({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/",fullStdLib:!1})];case 2:return i.pyodide=l.sent(),[4,this.runCode(c,0)];case 3:return l.sent(),o=function(e){var n="toJs"in e?e.toJs():Object.fromEntries(e);return s.onEvent(n)},this.pyodide.globals.get(a)(o),this.initialized=!0,[2]}}))}))},n.prototype._runCodeInternal=function(e){return u(this,void 0,void 0,(function(){var n;return p(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.pyodide.loadPackagesFromImports(e)];case 1:return t.sent(),[3,3];case 2:return n=t.sent(),(0,s.V)(s.h.Debug,"Something went wrong while loading imports: ",n),[3,3];case 3:return this.initialized?[4,this.pyodide.globals.get(l)(e)]:[3,5];case 4:return t.sent(),[3,6];case 5:return[2,this.pyodide.runPythonAsync(e)];case 6:return[2]}}))}))},n}(o.z);(0,i.Jj)(new d)}},r={};function i(e){var n=r[e];if(void 0!==n)return n.exports;var o=r[e]={exports:{}};return t[e](o,o.exports,i),o.exports}i.m=t,i.x=()=>{var e=i.O(void 0,[965],(()=>i(572)));return i.O(e)},e=[],i.O=(n,t,r,o)=>{if(!t){var s=1/0;for(f=0;f<e.length;f++){for(var[t,r,o]=e[f],a=!0,l=0;l<t.length;l++)(!1&o||s>=o)&&Object.keys(i.O).every((e=>i.O[e](t[l])))?t.splice(l--,1):(a=!1,o<s&&(s=o));if(a){e.splice(f--,1);var c=r();void 0!==c&&(n=c)}}return n}o=o||0;for(var f=e.length;f>0&&e[f-1][2]>o;f--)e[f]=e[f-1];e[f]=[t,r,o]},i.d=(e,n)=>{for(var t in n)i.o(n,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((n,t)=>(i.f[t](e,n),n)),[])),i.u=e=>e+".bundle.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var n=i.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={572:1};i.f.i=(n,t)=>{e[n]||importScripts(i.p+i.u(n))};var n=self.webpackChunkpapyros=self.webpackChunkpapyros||[],t=n.push.bind(n);n.push=n=>{var[r,o,s]=n;for(var a in o)i.o(o,a)&&(i.m[a]=o[a]);for(s&&s(i);r.length;)e[r.pop()]=1;t(n)}})(),n=i.x,i.x=()=>i.e(965).then(n),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFZQSxFQUFVUSxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRnhELEVBQW9CeUQsRUFBSVQsRyxTQ1h4QixJQUFJVSxFQUFrQixDQUNyQixJQUFLLEdBZ0JOMUQsRUFBb0IrQixFQUFFZCxFQUFJLENBQUNnQixFQUFTSSxLQUUvQnFCLEVBQWdCekIsSUFFbEI1RCxjQUFjMkIsRUFBb0J5RCxFQUFJekQsRUFBb0JzQyxFQUFFTCxLQUsvRCxJQUFJMEIsRUFBcUJDLEtBQTBCLG9CQUFJQSxLQUEwQixxQkFBSyxHQUNsRkMsRUFBNkJGLEVBQW1CRyxLQUFLQyxLQUFLSixHQUM5REEsRUFBbUJHLEtBdkJDNUUsSUFDbkIsSUFBSzBCLEVBQVVvRCxFQUFhQyxHQUFXL0UsRUFDdkMsSUFBSSxJQUFJZSxLQUFZK0QsRUFDaEJoRSxFQUFvQjRCLEVBQUVvQyxFQUFhL0QsS0FDckNELEVBQW9CTyxFQUFFTixHQUFZK0QsRUFBWS9ELElBSWhELElBREdnRSxHQUFTQSxFQUFRakUsR0FDZFksRUFBU00sUUFDZHdDLEVBQWdCOUMsRUFBU3NELE9BQVMsRUFDbkNMLEVBQTJCM0UsSyxHVm5CeEJqQixFQUFPK0IsRUFBb0JRLEVBQy9CUixFQUFvQlEsRUFBSSxJQUNoQlIsRUFBb0JnQyxFQUFFLEtBQUttQyxLQUFLbEcsR1dEZCtCLEVBQW9CUSxLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ydW50aW1lL3N0YXJ0dXAgY2h1bmsgZGVwZW5kZW5jaWVzIiwid2VicGFjazovL3BhcHlyb3MvLi9zcmMvd29ya2Vycy9weXRob24vaW5pdC5weS50cyIsIndlYnBhY2s6Ly9wYXB5cm9zLy4vc3JjL3dvcmtlcnMvcHl0aG9uL1B5dGhvbldvcmtlci53b3JrZXIudHMiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ydW50aW1lL2ltcG9ydFNjcmlwdHMgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgbmV4dCA9IF9fd2VicGFja19yZXF1aXJlX18ueDtcbl9fd2VicGFja19yZXF1aXJlX18ueCA9ICgpID0+IHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZSg5NjUpLnRoZW4obmV4dCk7XG59OyIsImV4cG9ydCBjb25zdCBJTklUSUFMSVpFX1BZVEhPTl9CQUNLRU5EID0gXCJfX2luaXRfcGFweXJvc1wiO1xuZXhwb3J0IGNvbnN0IFBST0NFU1NfUFlUSE9OX0NPREUgPSBcIl9fcHJvY2Vzc19jb2RlXCI7XG5leHBvcnQgY29uc3QgSU5JVElBTElaQVRJT05fQ09ERSA9XG4gICAgYFxuZnJvbSBweW9kaWRlIGltcG9ydCB0b19qcywgZXZhbF9jb2RlX2FzeW5jXG5mcm9tIGpzIGltcG9ydCBjb25zb2xlXG5pbXBvcnQgc3lzXG5pbXBvcnQgYXN0XG5pbXBvcnQganNvblxuaW1wb3J0IGh0bWxcbmltcG9ydCB0eXBlc1xuaW1wb3J0IG9zXG5pbXBvcnQgbWljcm9waXBcbmF3YWl0IG1pY3JvcGlwLmluc3RhbGwoJ2ZyaWVuZGx5X3RyYWNlYmFjaycpXG5pbXBvcnQgZnJpZW5kbHlfdHJhY2ViYWNrXG5mcm9tIGZyaWVuZGx5X3RyYWNlYmFjay5jb3JlIGltcG9ydCBGcmllbmRseVRyYWNlYmFja1xuXG5wYXB5cm9zID0gTm9uZVxuXG5jbGFzcyBQYXB5cm9zKCk6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNiKTpcbiAgICAgICAgc2VsZi5jYiA9IGNiXG4gICAgICAgIHNlbGYubGluZSA9IFwiXCJcbiAgICAgICAgc2VsZi5vdmVycmlkZV9idWlsdGlucygpXG5cbiAgICBkZWYgbWVzc2FnZShzZWxmLCBkYXRhKTpcbiAgICAgICAgcmV0dXJuIHNlbGYuY2IodG9fanMoZGF0YSkpXG5cbiAgICBkZWYgb3ZlcnJpZGVfYnVpbHRpbnMoc2VsZik6XG4gICAgICAgIHNlbGYub3ZlcnJpZGVfb3V0cHV0KClcbiAgICAgICAgc2VsZi5vdmVycmlkZV9pbnB1dCgpXG5cbiAgICBkZWYgb3ZlcnJpZGVfb3V0cHV0KHNlbGYpOlxuICAgICAgICBjbGFzcyBPdXRwdXRXcml0ZXI6XG4gICAgICAgICAgICBkZWYgX19pbml0X18oc2VsZiwgdHlwZSwgb25fd3JpdGUsIG9yaWdpbmFsKTpcbiAgICAgICAgICAgICAgICBzZWxmLmVuY29kaW5nID0gXCJ1dGYtOFwiXG4gICAgICAgICAgICAgICAgc2VsZi50eXBlID0gdHlwZVxuICAgICAgICAgICAgICAgIHNlbGYub25fd3JpdGUgPSBvbl93cml0ZVxuICAgICAgICAgICAgICAgIHNlbGYub3JpZ2luYWwgPSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmIHdyaXRlKHNlbGYsIHMpOlxuICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocywgYnl0ZXMpOlxuICAgICAgICAgICAgICAgICAgICBzID0gcy5kZWNvZGUoXCJ1dGY4XCIsIFwicmVwbGFjZVwiKVxuICAgICAgICAgICAgICAgIHNlbGYub25fd3JpdGUoZGljdCh0eXBlPXNlbGYudHlwZSwgZGF0YT1zKSlcblxuICAgICAgICAgICAgZGVmIGZsdXNoKHNlbGYpOlxuICAgICAgICAgICAgICAgIHBhc3MgIyBHaXZlbiBkYXRhIGlzIGFsd2F5cyBpbW1lZGlhdGVseSB3cml0dGVuXG5cbiAgICAgICAgICAgIGRlZiBfX2dldGF0dHJfXyhzZWxmLCBpdGVtKTpcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0YXR0cihzZWxmLm9yaWdpbmFsLCBpdGVtKVxuXG4gICAgICAgIG9uX3dyaXRlID0gbGFtYmRhIGQ6IHNlbGYubWVzc2FnZShkKVxuICAgICAgICBzeXMuc3Rkb3V0ID0gT3V0cHV0V3JpdGVyKFwib3V0cHV0XCIsIG9uX3dyaXRlLCBzeXMuc3Rkb3V0KVxuICAgICAgICBzeXMuc3RkZXJyID0gT3V0cHV0V3JpdGVyKFwiZXJyb3JcIiwgb25fd3JpdGUsIHN5cy5zdGRlcnIpXG5cbiAgICBkZWYgcmVhZGxpbmUoc2VsZiwgbj0tMSwgcHJvbXB0PVwiXCIpOlxuICAgICAgICBpZiBub3Qgc2VsZi5saW5lOlxuICAgICAgICAgICAgc2VsZi5saW5lID0gc2VsZi5tZXNzYWdlKGRpY3QodHlwZT1cImlucHV0XCIsIGRhdGE9cHJvbXB0KSkgKyBcIlxcXFxuXCJcbiAgICAgICAgaWYgbiA8IDAgb3IgbiA+IGxlbihzZWxmLmxpbmUpOlxuICAgICAgICAgICAgbiA9IGxlbihzZWxmLmxpbmUpXG4gICAgICAgIHRvX3JldHVybiA9IHNlbGYubGluZVswOm5dXG4gICAgICAgIHNlbGYubGluZSA9IHNlbGYubGluZVtuOl1cbiAgICAgICAgcmV0dXJuIHRvX3JldHVyblxuXG4gICAgZGVmIGdsb2JhbHMoc2VsZiwgZmlsZW5hbWUpOlxuICAgICAgICBtb2QgPSB0eXBlcy5Nb2R1bGVUeXBlKFwiX19tYWluX19cIilcbiAgICAgICAgbW9kLl9fZmlsZV9fID0gZmlsZW5hbWVcbiAgICAgICAgc3lzLm1vZHVsZXNbXCJfX21haW5fX1wiXSA9IG1vZFxuICAgICAgICByZXR1cm4gbW9kLl9fZGljdF9fXG5cbiAgICBkZWYgb3ZlcnJpZGVfaW5wdXQoc2VsZik6XG4gICAgICAgIHN5cy5zdGRpbi5yZWFkbGluZSA9IHNlbGYucmVhZGxpbmVcbiAgICAgICAgaW1wb3J0IGJ1aWx0aW5zXG4gICAgICAgIGJ1aWx0aW5zLmlucHV0ID0gbGFtYmRhIHByb21wdD1cIlwiOiBzZWxmLnJlYWRsaW5lKHByb21wdD1wcm9tcHQpWzotMV0gIyBSZW1vdmUgbmV3bGluZVxuXG5kZWYgZm9ybWF0X2V4Y2VwdGlvbihmaWxlbmFtZSwgZXhjKTpcbiAgICBmciA9IEZyaWVuZGx5VHJhY2ViYWNrKHR5cGUoZXhjKSwgZXhjLCBleGMuX190cmFjZWJhY2tfXylcbiAgICBmci5hc3NpZ25fZ2VuZXJpYygpXG4gICAgZnIuYXNzaWduX2NhdXNlKClcbiAgICB0YiA9IGZyLmluZm8uZ2V0KFwic2hvcnRlbmVkX3RyYWNlYmFja1wiLCBcIk5vIHRyYWNlYmFja1wiKVxuICAgIGluZm8gPSBmci5pbmZvLmdldChcImdlbmVyaWNcIiwgXCJObyBpbmZvcm1hdGlvbiBhdmFpbGFibGUuXCIpXG4gICAgd2h5ID0gZnIuaW5mby5nZXQoXCJjYXVzZVwiLCBcIlVua25vd24gY2F1c2VcIilcbiAgICB3aGF0ID0gZnIuaW5mby5nZXQoXCJtZXNzYWdlXCIsIFwiTm8gbWVzc2FnZVwiKVxuICAgIHVzZXJfc3RhcnQgPSAwXG4gICAgdGJfbGluZXMgPSB0Yi5zcGxpdChcIlxcXFxuXCIpXG4gICAgd2hpbGUgdXNlcl9zdGFydCA8IGxlbih0Yl9saW5lcykgYW5kIGZpbGVuYW1lIG5vdCBpbiB0Yl9saW5lc1t1c2VyX3N0YXJ0XTpcbiAgICAgICAgdXNlcl9zdGFydCArPSAxXG4gICAgbmFtZSA9IHR5cGUoZXhjKS5fX25hbWVfX1xuICAgIHVzZXJfZW5kID0gdXNlcl9zdGFydCArIDFcbiAgICB3aGlsZSB1c2VyX2VuZCA8IGxlbih0Yl9saW5lcykgYW5kIG5hbWUgbm90IGluIHRiX2xpbmVzW3VzZXJfZW5kXTpcbiAgICAgICAgdXNlcl9lbmQgKz0gMVxuICAgIHdoZXJlID0gXCJcXFxcblwiLmpvaW4odGJfbGluZXNbdXNlcl9zdGFydDp1c2VyX2VuZF0pIG9yIFwiTm8gbG9jYXRpb25cIlxuICAgIHJldHVybiBqc29uLmR1bXBzKFxuICAgICAgICBkaWN0KFxuICAgICAgICAgICAgbmFtZT1uYW1lLFxuICAgICAgICAgICAgdHJhY2ViYWNrPXRiLFxuICAgICAgICAgICAgaW5mbz1pbmZvLFxuICAgICAgICAgICAgd2h5PXdoeSxcbiAgICAgICAgICAgIHdoZXJlPXdoZXJlLFxuICAgICAgICAgICAgd2hhdD13aGF0XG4gICAgICAgIClcbiAgICApXG5cbmRlZiAke0lOSVRJQUxJWkVfUFlUSE9OX0JBQ0tFTkR9KGNiKTpcbiAgICBnbG9iYWwgcGFweXJvc1xuICAgIHBhcHlyb3MgPSBQYXB5cm9zKGNiKVxuXG5hc3luYyBkZWYgJHtQUk9DRVNTX1BZVEhPTl9DT0RFfShjb2RlLCBmaWxlbmFtZT1cIm15X2NvZGUucHlcIik6XG4gICAgd2l0aCBvcGVuKGZpbGVuYW1lLCBcIndcIikgYXMgZjpcbiAgICAgICAgZi53cml0ZShjb2RlKVxuICAgIGZyaWVuZGx5X3RyYWNlYmFjay5zb3VyY2VfY2FjaGUuY2FjaGUuYWRkKGZpbGVuYW1lLCBjb2RlKVxuICAgIHRyeTpcbiAgICAgICAgYXdhaXQgZXZhbF9jb2RlX2FzeW5jKGNvZGUsIHBhcHlyb3MuZ2xvYmFscyhmaWxlbmFtZSksXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU9ZmlsZW5hbWUsIHJldHVybl9tb2RlPVwibm9uZVwiKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcGFweXJvcy5tZXNzYWdlKGRpY3QodHlwZT1cImVycm9yXCIsIGRhdGE9Zm9ybWF0X2V4Y2VwdGlvbihmaWxlbmFtZSwgZSkpKVxuXG5gO1xuIiwiaW1wb3J0IHsgZXhwb3NlIH0gZnJvbSBcImNvbWxpbmtcIjtcbmltcG9ydCB7IEJhY2tlbmQgfSBmcm9tIFwiLi4vLi4vQmFja2VuZFwiO1xuaW1wb3J0IHsgUGFweXJvc0V2ZW50IH0gZnJvbSBcIi4uLy4uL1BhcHlyb3NFdmVudFwiO1xuaW1wb3J0IHsgTG9nVHlwZSwgcGFweXJvc0xvZyB9IGZyb20gXCIuLi8uLi91dGlsL0xvZ2dpbmdcIjtcbmltcG9ydCB7IElOSVRJQUxJWkFUSU9OX0NPREUsIElOSVRJQUxJWkVfUFlUSE9OX0JBQ0tFTkQsIFBST0NFU1NfUFlUSE9OX0NPREUgfSBmcm9tIFwiLi9pbml0LnB5XCI7XG5cbmludGVyZmFjZSBQeW9kaWRlIHtcbiAgICBydW5QeXRob246IChjb2RlOiBzdHJpbmcsIGdsb2JhbHM/OiBhbnkpID0+IGFueTtcbiAgICBydW5QeXRob25Bc3luYzogKGNvZGU6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBsb2FkUGFja2FnZXNGcm9tSW1wb3J0czogKGNvZGU6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBnbG9iYWxzOiBNYXA8c3RyaW5nLCBhbnk+O1xufVxuZGVjbGFyZSBmdW5jdGlvbiBpbXBvcnRTY3JpcHRzKC4uLnVybHM6IHN0cmluZ1tdKTogdm9pZDtcbmRlY2xhcmUgZnVuY3Rpb24gbG9hZFB5b2RpZGUoYXJnczogeyBpbmRleFVSTDogc3RyaW5nOyBmdWxsU3RkTGliOiBib29sZWFuIH0pOiBQcm9taXNlPFB5b2RpZGU+O1xuXG5pbXBvcnRTY3JpcHRzKFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L3B5b2RpZGUvdjAuMTguMS9mdWxsL3B5b2RpZGUuanNcIik7XG5cblxuY2xhc3MgUHl0aG9uV29ya2VyIGV4dGVuZHMgQmFja2VuZCB7XG4gICAgcHlvZGlkZTogUHlvZGlkZTtcbiAgICBpbml0aWFsaXplZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnB5b2RpZGUgPSB7fSBhcyBQeW9kaWRlO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgb3ZlcnJpZGUgYXN5bmMgbGF1bmNoKG9uRXZlbnQ6IChlOiBQYXB5cm9zRXZlbnQpID0+IHZvaWQsXG4gICAgICAgIGlucHV0VGV4dEFycmF5PzogVWludDhBcnJheSwgaW5wdXRNZXRhRGF0YT86IEludDMyQXJyYXkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgc3VwZXIubGF1bmNoKG9uRXZlbnQsIGlucHV0VGV4dEFycmF5LCBpbnB1dE1ldGFEYXRhKTtcbiAgICAgICAgdGhpcy5weW9kaWRlID0gYXdhaXQgbG9hZFB5b2RpZGUoe1xuICAgICAgICAgICAgaW5kZXhVUkw6IFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L3B5b2RpZGUvdjAuMTguMS9mdWxsL1wiLFxuICAgICAgICAgICAgZnVsbFN0ZExpYjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMucnVuQ29kZShJTklUSUFMSVpBVElPTl9DT0RFLCAwKTtcbiAgICAgICAgLy8gUHl0aG9uIGNhbGxzIG91ciBmdW5jdGlvbiB3aXRoIGEgZGljdCwgd2hpY2ggbXVzdCBiZSBjb252ZXJ0ZWQgdG8gYSBQYXB5cm9zRXZlbnRcbiAgICAgICAgY29uc3QgZXZlbnRDYWxsYmFjayA9IChkYXRhOiBhbnkpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGpzRXZlbnQ6IFBhcHlyb3NFdmVudCA9IFwidG9Kc1wiIGluIGRhdGEgPyBkYXRhLnRvSnMoKSA6IE9iamVjdC5mcm9tRW50cmllcyhkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uRXZlbnQoanNFdmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHlvZGlkZS5nbG9iYWxzLmdldChJTklUSUFMSVpFX1BZVEhPTl9CQUNLRU5EKShldmVudENhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuXG4gICAgb3ZlcnJpZGUgYXN5bmMgX3J1bkNvZGVJbnRlcm5hbChjb2RlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5weW9kaWRlLmxvYWRQYWNrYWdlc0Zyb21JbXBvcnRzKGNvZGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBwYXB5cm9zTG9nKExvZ1R5cGUuRGVidWcsIFwiU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgbG9hZGluZyBpbXBvcnRzOiBcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHlvZGlkZS5nbG9iYWxzLmdldChQUk9DRVNTX1BZVEhPTl9DT0RFKShjb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnB5b2RpZGUucnVuUHl0aG9uQXN5bmMoY29kZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9zZShuZXcgUHl0aG9uV29ya2VyKCkpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyB0aGUgc3RhcnR1cCBmdW5jdGlvblxuX193ZWJwYWNrX3JlcXVpcmVfXy54ID0gKCkgPT4ge1xuXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcblx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG5cdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzk2NV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDU3MikpKVxuXHRfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbn07XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3MgYW5kIHNpYmxpbmcgY2h1bmtzIGZvciB0aGUgZW50cnlwb2ludFxuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmJ1bmRsZS5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBjaHVua3Ncbi8vIFwiMVwiIG1lYW5zIFwiYWxyZWFkeSBsb2FkZWRcIlxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0NTcyOiAxXG59O1xuXG4vLyBpbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmdcbnZhciBpbnN0YWxsQ2h1bmsgPSAoZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdHdoaWxlKGNodW5rSWRzLmxlbmd0aClcblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHMucG9wKCldID0gMTtcblx0cGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmkgPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0Ly8gXCIxXCIgaXMgdGhlIHNpZ25hbCBmb3IgXCJhbHJlYWR5IGxvYWRlZFwiXG5cdGlmKCFpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0aW1wb3J0U2NyaXB0cyhfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCkpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtwYXB5cm9zXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3BhcHlyb3NcIl0gfHwgW107XG52YXIgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24gPSBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IGluc3RhbGxDaHVuaztcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdCIsIi8vIHJ1biBzdGFydHVwXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18ueCgpO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibmV4dCIsIklOSVRJQUxJWkVfUFlUSE9OX0JBQ0tFTkQiLCJQUk9DRVNTX1BZVEhPTl9DT0RFIiwiSU5JVElBTElaQVRJT05fQ09ERSIsImltcG9ydFNjcmlwdHMiLCJweW9kaWRlIiwiaW5pdGlhbGl6ZWQiLCJsYXVuY2giLCJvbkV2ZW50IiwiaW5wdXRUZXh0QXJyYXkiLCJpbnB1dE1ldGFEYXRhIiwidGhpcyIsImxvYWRQeW9kaWRlIiwiaW5kZXhVUkwiLCJmdWxsU3RkTGliIiwicnVuQ29kZSIsImV2ZW50Q2FsbGJhY2siLCJkYXRhIiwianNFdmVudCIsInRvSnMiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImdsb2JhbHMiLCJnZXQiLCJfcnVuQ29kZUludGVybmFsIiwiY29kZSIsImxvYWRQYWNrYWdlc0Zyb21JbXBvcnRzIiwicnVuUHl0aG9uQXN5bmMiLCJCYWNrZW5kIiwiUHl0aG9uV29ya2VyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwieCIsIl9fd2VicGFja19leHBvcnRzX18iLCJPIiwicmVzdWx0IiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJpIiwibGVuZ3RoIiwiZnVsZmlsbGVkIiwiaiIsImtleXMiLCJldmVyeSIsImtleSIsInNwbGljZSIsInIiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJmIiwiZSIsImNodW5rSWQiLCJQcm9taXNlIiwiYWxsIiwicmVkdWNlIiwicHJvbWlzZXMiLCJ1IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIndpbmRvdyIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJsb2NhdGlvbiIsImRvY3VtZW50IiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIkVycm9yIiwicmVwbGFjZSIsInAiLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJwdXNoIiwiYmluZCIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInBvcCIsInRoZW4iXSwic291cmNlUm9vdCI6IiJ9