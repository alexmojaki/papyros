(()=>{"use strict";var e,n,t={572:(e,n,t)=>{var r,o=t(375),i=t(872),s="__init_papyros",a="__process_code",l='\nfrom pyodide import to_js, eval_code_async\nfrom js import console\nimport sys\nimport ast\nimport json\nimport html\nimport types\nimport micropip\nawait micropip.install(\'friendly_traceback\')\nimport friendly_traceback\nfrom friendly_traceback.core import FriendlyTraceback\n\n__papyros = None\n\nclass __Papyros():\n    def __init__(self, cb):\n        self.cb = cb\n        self.line = ""\n        self.override_builtins()\n\n    def message(self, data):\n        return self.cb(to_js(data))\n\n    def override_builtins(self):\n        self.override_output()\n        self.override_input()\n\n    def override_output(self):\n        class __OutputWriter:\n            def __init__(self, type, on_write):\n                self.encoding = "utf-8"\n                self.type = type\n                self.on_write = on_write\n                \n            def write(self, s):\n                self.on_write(dict(type=self.type, data=s))\n\n            def flush(self):\n                pass # Given data is always immediately written\n        on_write = lambda d: self.message(d)\n        sys.stdout = __OutputWriter("output", on_write)\n        sys.stderr = __OutputWriter("error", on_write)\n\n    def readline(self, n=-1, prompt=""):\n        if not self.line:\n            self.line = self.message(dict(type="input", data=prompt)) + "\\n"\n        if n < 0 or n > len(self.line):\n            n = len(self.line)\n        to_return = self.line[0:n]\n        self.line = self.line[n:]\n        return to_return\n\n    def override_input(self):\n        global input\n        input = lambda prompt="": self.readline(prompt=prompt)[:-1] # Remove newline\n\n        sys.stdin.readline = self.readline\n\ndef clean_traceback(tb, filename):\n    # For some reason the first character of __file__ is lost in friendly_traceback\n    for prefix in ["\\"", "\\\'", " "]:\n        tb = tb.replace(prefix + filename[1:], prefix + filename)\n    return html.escape(tb)\n\ndef format_exception(filename, exc):\n    fr = FriendlyTraceback(type(exc), exc, exc.__traceback__)\n    fr.assign_generic()\n    fr.assign_cause()\n    tb = fr.info.get("simulated_python_traceback", "No traceback")\n    info = fr.info.get("generic", "No information available.")\n    why = fr.info.get("cause", "Unknown cause")\n    suggestions = fr.info.get("suggest", "No suggestions")\n    what = fr.info.get("message", "No message")\n    user_start = 0\n    tb_lines = tb.split("\\n")\n    while user_start < len(tb_lines) and filename not in tb_lines[user_start]:\n        user_start += 1\n    name = type(exc).__name__\n    user_end = user_start + 1\n    while user_end < len(tb_lines) and name not in tb_lines[user_end]:\n        user_end += 1\n    where = "\\n".join(tb_lines[user_start:user_end]) or "No location"\n    return json.dumps(\n        dict(\n            name=name,\n            traceback=tb,\n            info=info,\n            why=why,\n            where=where,\n            what=what,\n            suggestions=suggestions\n        )\n    )\n\ndef '.concat(s,"(cb):\n    global __papyros\n    __papyros = __Papyros(cb)\n\nasync def ").concat(a,'(code, run, filename="my_code.py"):\n    with open(filename, "w") as f:\n        f.write(code)\n    mod = types.ModuleType("__main__")\n    mod.__file__ = filename\n    sys.modules["__main__"] = mod\n    try:\n        if run:\n            await eval_code_async(code, mod.__dict__, filename=filename)\n        else: # Only compile code (TODO separate Backend endpoint)\n            compile(code, filename, mode="exec", flags=ast.PyCF_ALLOW_TOP_LEVEL_AWAIT)\n        return True\n    except Exception as e:\n        global __papyros\n        __papyros.message(dict(type="error", data=format_exception(filename, e)))\n        return False\n\n'),c=(r=function(e,n){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},r(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),f=function(e,n,t,r){return new(t||(t=Promise))((function(o,i){function s(e){try{l(r.next(e))}catch(e){i(e)}}function a(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,a)}l((r=r.apply(e,n||[])).next())}))},p=function(e,n){var t,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(e,s)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};importScripts("https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js");var u=function(e){function n(){var n=e.call(this)||this;return n.pyodide={},n.initialized=!1,n.globals=new Map,n}return c(n,e),n.prototype.launch=function(n,t,r){return f(this,void 0,void 0,(function(){var o,i,a=this;return p(this,(function(c){switch(c.label){case 0:return[4,e.prototype.launch.call(this,n,t,r)];case 1:return c.sent(),o=this,[4,loadPyodide({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/",fullStdLib:!1})];case 2:return o.pyodide=c.sent(),[4,this.runCode(l,0)];case 3:return c.sent(),i=function(e){var n="toJs"in e?e.toJs():Object.fromEntries(e);return a.onEvent(n)},this.pyodide.globals.get(s)(i),this.globals=new Map(this.pyodide.globals.toJs()),this.initialized=!0,[2]}}))}))},n.prototype._cleanScope=function(){var e,n,t=this.pyodide.globals,r=[];try{for(var o=function(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}(t.keys()),i=o.next();!i.done;i=o.next()){var s=i.value;this.globals.has(s)?t.set(s,this.globals.get(s)):r.push(s)}}catch(n){e={error:n}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}r.forEach((function(e){return t.delete(e)}))},n.prototype._runCodeInternal=function(e){return f(this,void 0,void 0,(function(){return p(this,(function(n){switch(n.label){case 0:return this.initialized?[4,this.pyodide.globals.get(a)(e,!1)]:[3,5];case 1:return n.sent()?[4,this.pyodide.loadPackagesFromImports(e)]:[3,4];case 2:return n.sent(),[4,this.pyodide.globals.get(a)(e,!0)];case 3:n.sent(),n.label=4;case 4:return this._cleanScope(),[3,7];case 5:return[4,this.pyodide.loadPackagesFromImports(e)];case 6:return n.sent(),[2,this.pyodide.runPythonAsync(e)];case 7:return[2]}}))}))},n}(i.z);(0,o.Jj)(new u)}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,o),i.exports}o.m=t,o.x=()=>{var e=o.O(void 0,[114],(()=>o(572)));return o.O(e)},e=[],o.O=(n,t,r,i)=>{if(!t){var s=1/0;for(f=0;f<e.length;f++){for(var[t,r,i]=e[f],a=!0,l=0;l<t.length;l++)(!1&i||s>=i)&&Object.keys(o.O).every((e=>o.O[e](t[l])))?t.splice(l--,1):(a=!1,i<s&&(s=i));if(a){e.splice(f--,1);var c=r();void 0!==c&&(n=c)}}return n}i=i||0;for(var f=e.length;f>0&&e[f-1][2]>i;f--)e[f]=e[f-1];e[f]=[t,r,i]},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((n,t)=>(o.f[t](e,n),n)),[])),o.u=e=>e+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={572:1};o.f.i=(n,t)=>{e[n]||importScripts(o.p+o.u(n))};var n=self.webpackChunkpapyros=self.webpackChunkpapyros||[],t=n.push.bind(n);n.push=n=>{var[r,i,s]=n;for(var a in i)o.o(i,a)&&(o.m[a]=i[a]);for(s&&s(o);r.length;)e[r.pop()]=1;t(n)}})(),n=o.x,o.x=()=>o.e(114).then(n),o.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQVNNLFFBQ2RzQyxFQUFnQjVDLEVBQVNtRCxPQUFTLEVBQ25DSixFQUEyQm5GLEssR1ZuQnhCbkIsRUFBTzJDLEVBQW9CUSxFQUMvQlIsRUFBb0JRLEVBQUksSUFDaEJSLEVBQW9COEIsRUFBRSxLQUFLa0MsS0FBSzNHLEdXRGQyQyxFQUFvQlEsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9zdGFydHVwIGNodW5rIGRlcGVuZGVuY2llcyIsIndlYnBhY2s6Ly9wYXB5cm9zLy4vc3JjL3dvcmtlcnMvcHl0aG9uL2luaXQucHkudHMiLCJ3ZWJwYWNrOi8vcGFweXJvcy8uL3NyYy93b3JrZXJzL3B5dGhvbi9QeXRob25Xb3JrZXIud29ya2VyLnRzIiwid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9pbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIG5leHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLng7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnggPSAoKSA9PiB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoMTE0KS50aGVuKG5leHQpO1xufTsiLCJleHBvcnQgY29uc3QgSU5JVElBTElaRV9QWVRIT05fQkFDS0VORCA9IFwiX19pbml0X3BhcHlyb3NcIjtcbmV4cG9ydCBjb25zdCBQUk9DRVNTX1BZVEhPTl9DT0RFID0gXCJfX3Byb2Nlc3NfY29kZVwiO1xuZXhwb3J0IGNvbnN0IElOSVRJQUxJWkFUSU9OX0NPREUgPVxuICAgIGBcbmZyb20gcHlvZGlkZSBpbXBvcnQgdG9fanMsIGV2YWxfY29kZV9hc3luY1xuZnJvbSBqcyBpbXBvcnQgY29uc29sZVxuaW1wb3J0IHN5c1xuaW1wb3J0IGFzdFxuaW1wb3J0IGpzb25cbmltcG9ydCBodG1sXG5pbXBvcnQgdHlwZXNcbmltcG9ydCBtaWNyb3BpcFxuYXdhaXQgbWljcm9waXAuaW5zdGFsbCgnZnJpZW5kbHlfdHJhY2ViYWNrJylcbmltcG9ydCBmcmllbmRseV90cmFjZWJhY2tcbmZyb20gZnJpZW5kbHlfdHJhY2ViYWNrLmNvcmUgaW1wb3J0IEZyaWVuZGx5VHJhY2ViYWNrXG5cbl9fcGFweXJvcyA9IE5vbmVcblxuY2xhc3MgX19QYXB5cm9zKCk6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNiKTpcbiAgICAgICAgc2VsZi5jYiA9IGNiXG4gICAgICAgIHNlbGYubGluZSA9IFwiXCJcbiAgICAgICAgc2VsZi5vdmVycmlkZV9idWlsdGlucygpXG5cbiAgICBkZWYgbWVzc2FnZShzZWxmLCBkYXRhKTpcbiAgICAgICAgcmV0dXJuIHNlbGYuY2IodG9fanMoZGF0YSkpXG5cbiAgICBkZWYgb3ZlcnJpZGVfYnVpbHRpbnMoc2VsZik6XG4gICAgICAgIHNlbGYub3ZlcnJpZGVfb3V0cHV0KClcbiAgICAgICAgc2VsZi5vdmVycmlkZV9pbnB1dCgpXG5cbiAgICBkZWYgb3ZlcnJpZGVfb3V0cHV0KHNlbGYpOlxuICAgICAgICBjbGFzcyBfX091dHB1dFdyaXRlcjpcbiAgICAgICAgICAgIGRlZiBfX2luaXRfXyhzZWxmLCB0eXBlLCBvbl93cml0ZSk6XG4gICAgICAgICAgICAgICAgc2VsZi5lbmNvZGluZyA9IFwidXRmLThcIlxuICAgICAgICAgICAgICAgIHNlbGYudHlwZSA9IHR5cGVcbiAgICAgICAgICAgICAgICBzZWxmLm9uX3dyaXRlID0gb25fd3JpdGVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZiB3cml0ZShzZWxmLCBzKTpcbiAgICAgICAgICAgICAgICBzZWxmLm9uX3dyaXRlKGRpY3QodHlwZT1zZWxmLnR5cGUsIGRhdGE9cykpXG5cbiAgICAgICAgICAgIGRlZiBmbHVzaChzZWxmKTpcbiAgICAgICAgICAgICAgICBwYXNzICMgR2l2ZW4gZGF0YSBpcyBhbHdheXMgaW1tZWRpYXRlbHkgd3JpdHRlblxuICAgICAgICBvbl93cml0ZSA9IGxhbWJkYSBkOiBzZWxmLm1lc3NhZ2UoZClcbiAgICAgICAgc3lzLnN0ZG91dCA9IF9fT3V0cHV0V3JpdGVyKFwib3V0cHV0XCIsIG9uX3dyaXRlKVxuICAgICAgICBzeXMuc3RkZXJyID0gX19PdXRwdXRXcml0ZXIoXCJlcnJvclwiLCBvbl93cml0ZSlcblxuICAgIGRlZiByZWFkbGluZShzZWxmLCBuPS0xLCBwcm9tcHQ9XCJcIik6XG4gICAgICAgIGlmIG5vdCBzZWxmLmxpbmU6XG4gICAgICAgICAgICBzZWxmLmxpbmUgPSBzZWxmLm1lc3NhZ2UoZGljdCh0eXBlPVwiaW5wdXRcIiwgZGF0YT1wcm9tcHQpKSArIFwiXFxcXG5cIlxuICAgICAgICBpZiBuIDwgMCBvciBuID4gbGVuKHNlbGYubGluZSk6XG4gICAgICAgICAgICBuID0gbGVuKHNlbGYubGluZSlcbiAgICAgICAgdG9fcmV0dXJuID0gc2VsZi5saW5lWzA6bl1cbiAgICAgICAgc2VsZi5saW5lID0gc2VsZi5saW5lW246XVxuICAgICAgICByZXR1cm4gdG9fcmV0dXJuXG5cbiAgICBkZWYgb3ZlcnJpZGVfaW5wdXQoc2VsZik6XG4gICAgICAgIGdsb2JhbCBpbnB1dFxuICAgICAgICBpbnB1dCA9IGxhbWJkYSBwcm9tcHQ9XCJcIjogc2VsZi5yZWFkbGluZShwcm9tcHQ9cHJvbXB0KVs6LTFdICMgUmVtb3ZlIG5ld2xpbmVcblxuICAgICAgICBzeXMuc3RkaW4ucmVhZGxpbmUgPSBzZWxmLnJlYWRsaW5lXG5cbmRlZiBjbGVhbl90cmFjZWJhY2sodGIsIGZpbGVuYW1lKTpcbiAgICAjIEZvciBzb21lIHJlYXNvbiB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIF9fZmlsZV9fIGlzIGxvc3QgaW4gZnJpZW5kbHlfdHJhY2ViYWNrXG4gICAgZm9yIHByZWZpeCBpbiBbXCJcXFxcXCJcIiwgXCJcXFxcJ1wiLCBcIiBcIl06XG4gICAgICAgIHRiID0gdGIucmVwbGFjZShwcmVmaXggKyBmaWxlbmFtZVsxOl0sIHByZWZpeCArIGZpbGVuYW1lKVxuICAgIHJldHVybiBodG1sLmVzY2FwZSh0YilcblxuZGVmIGZvcm1hdF9leGNlcHRpb24oZmlsZW5hbWUsIGV4Yyk6XG4gICAgZnIgPSBGcmllbmRseVRyYWNlYmFjayh0eXBlKGV4YyksIGV4YywgZXhjLl9fdHJhY2ViYWNrX18pXG4gICAgZnIuYXNzaWduX2dlbmVyaWMoKVxuICAgIGZyLmFzc2lnbl9jYXVzZSgpXG4gICAgdGIgPSBmci5pbmZvLmdldChcInNpbXVsYXRlZF9weXRob25fdHJhY2ViYWNrXCIsIFwiTm8gdHJhY2ViYWNrXCIpXG4gICAgaW5mbyA9IGZyLmluZm8uZ2V0KFwiZ2VuZXJpY1wiLCBcIk5vIGluZm9ybWF0aW9uIGF2YWlsYWJsZS5cIilcbiAgICB3aHkgPSBmci5pbmZvLmdldChcImNhdXNlXCIsIFwiVW5rbm93biBjYXVzZVwiKVxuICAgIHN1Z2dlc3Rpb25zID0gZnIuaW5mby5nZXQoXCJzdWdnZXN0XCIsIFwiTm8gc3VnZ2VzdGlvbnNcIilcbiAgICB3aGF0ID0gZnIuaW5mby5nZXQoXCJtZXNzYWdlXCIsIFwiTm8gbWVzc2FnZVwiKVxuICAgIHVzZXJfc3RhcnQgPSAwXG4gICAgdGJfbGluZXMgPSB0Yi5zcGxpdChcIlxcXFxuXCIpXG4gICAgd2hpbGUgdXNlcl9zdGFydCA8IGxlbih0Yl9saW5lcykgYW5kIGZpbGVuYW1lIG5vdCBpbiB0Yl9saW5lc1t1c2VyX3N0YXJ0XTpcbiAgICAgICAgdXNlcl9zdGFydCArPSAxXG4gICAgbmFtZSA9IHR5cGUoZXhjKS5fX25hbWVfX1xuICAgIHVzZXJfZW5kID0gdXNlcl9zdGFydCArIDFcbiAgICB3aGlsZSB1c2VyX2VuZCA8IGxlbih0Yl9saW5lcykgYW5kIG5hbWUgbm90IGluIHRiX2xpbmVzW3VzZXJfZW5kXTpcbiAgICAgICAgdXNlcl9lbmQgKz0gMVxuICAgIHdoZXJlID0gXCJcXFxcblwiLmpvaW4odGJfbGluZXNbdXNlcl9zdGFydDp1c2VyX2VuZF0pIG9yIFwiTm8gbG9jYXRpb25cIlxuICAgIHJldHVybiBqc29uLmR1bXBzKFxuICAgICAgICBkaWN0KFxuICAgICAgICAgICAgbmFtZT1uYW1lLFxuICAgICAgICAgICAgdHJhY2ViYWNrPXRiLFxuICAgICAgICAgICAgaW5mbz1pbmZvLFxuICAgICAgICAgICAgd2h5PXdoeSxcbiAgICAgICAgICAgIHdoZXJlPXdoZXJlLFxuICAgICAgICAgICAgd2hhdD13aGF0LFxuICAgICAgICAgICAgc3VnZ2VzdGlvbnM9c3VnZ2VzdGlvbnNcbiAgICAgICAgKVxuICAgIClcblxuZGVmICR7SU5JVElBTElaRV9QWVRIT05fQkFDS0VORH0oY2IpOlxuICAgIGdsb2JhbCBfX3BhcHlyb3NcbiAgICBfX3BhcHlyb3MgPSBfX1BhcHlyb3MoY2IpXG5cbmFzeW5jIGRlZiAke1BST0NFU1NfUFlUSE9OX0NPREV9KGNvZGUsIHJ1biwgZmlsZW5hbWU9XCJteV9jb2RlLnB5XCIpOlxuICAgIHdpdGggb3BlbihmaWxlbmFtZSwgXCJ3XCIpIGFzIGY6XG4gICAgICAgIGYud3JpdGUoY29kZSlcbiAgICBtb2QgPSB0eXBlcy5Nb2R1bGVUeXBlKFwiX19tYWluX19cIilcbiAgICBtb2QuX19maWxlX18gPSBmaWxlbmFtZVxuICAgIHN5cy5tb2R1bGVzW1wiX19tYWluX19cIl0gPSBtb2RcbiAgICB0cnk6XG4gICAgICAgIGlmIHJ1bjpcbiAgICAgICAgICAgIGF3YWl0IGV2YWxfY29kZV9hc3luYyhjb2RlLCBtb2QuX19kaWN0X18sIGZpbGVuYW1lPWZpbGVuYW1lKVxuICAgICAgICBlbHNlOiAjIE9ubHkgY29tcGlsZSBjb2RlIChUT0RPIHNlcGFyYXRlIEJhY2tlbmQgZW5kcG9pbnQpXG4gICAgICAgICAgICBjb21waWxlKGNvZGUsIGZpbGVuYW1lLCBtb2RlPVwiZXhlY1wiLCBmbGFncz1hc3QuUHlDRl9BTExPV19UT1BfTEVWRUxfQVdBSVQpXG4gICAgICAgIHJldHVybiBUcnVlXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBnbG9iYWwgX19wYXB5cm9zXG4gICAgICAgIF9fcGFweXJvcy5tZXNzYWdlKGRpY3QodHlwZT1cImVycm9yXCIsIGRhdGE9Zm9ybWF0X2V4Y2VwdGlvbihmaWxlbmFtZSwgZSkpKVxuICAgICAgICByZXR1cm4gRmFsc2VcblxuYDtcbiIsImltcG9ydCB7IGV4cG9zZSB9IGZyb20gXCJjb21saW5rXCI7XG5pbXBvcnQgeyBCYWNrZW5kIH0gZnJvbSBcIi4uLy4uL0JhY2tlbmRcIjtcbmltcG9ydCB7IFBhcHlyb3NFdmVudCB9IGZyb20gXCIuLi8uLi9QYXB5cm9zRXZlbnRcIjtcbmltcG9ydCB7IElOSVRJQUxJWkFUSU9OX0NPREUsIElOSVRJQUxJWkVfUFlUSE9OX0JBQ0tFTkQsIFBST0NFU1NfUFlUSE9OX0NPREUgfSBmcm9tIFwiLi9pbml0LnB5XCI7XG5cbmludGVyZmFjZSBQeW9kaWRlIHtcbiAgICBydW5QeXRob246IChjb2RlOiBzdHJpbmcsIGdsb2JhbHM/OiBhbnkpID0+IGFueTtcbiAgICBydW5QeXRob25Bc3luYzogKGNvZGU6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBsb2FkUGFja2FnZXNGcm9tSW1wb3J0czogKGNvZGU6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBnbG9iYWxzOiBNYXA8c3RyaW5nLCBhbnk+O1xufVxuZGVjbGFyZSBmdW5jdGlvbiBpbXBvcnRTY3JpcHRzKC4uLnVybHM6IHN0cmluZ1tdKTogdm9pZDtcbmRlY2xhcmUgZnVuY3Rpb24gbG9hZFB5b2RpZGUoYXJnczogeyBpbmRleFVSTDogc3RyaW5nOyBmdWxsU3RkTGliOiBib29sZWFuIH0pOiBQcm9taXNlPFB5b2RpZGU+O1xuXG5pbXBvcnRTY3JpcHRzKFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L3B5b2RpZGUvdjAuMTguMS9mdWxsL3B5b2RpZGUuanNcIik7XG5cblxuY2xhc3MgUHl0aG9uV29ya2VyIGV4dGVuZHMgQmFja2VuZCB7XG4gICAgcHlvZGlkZTogUHlvZGlkZTtcbiAgICBpbml0aWFsaXplZDogYm9vbGVhbjtcbiAgICBnbG9iYWxzOiBNYXA8c3RyaW5nLCBhbnk+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucHlvZGlkZSA9IHt9IGFzIFB5b2RpZGU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nbG9iYWxzID0gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIG92ZXJyaWRlIGFzeW5jIGxhdW5jaChvbkV2ZW50OiAoZTogUGFweXJvc0V2ZW50KSA9PiB2b2lkLFxuICAgICAgICBpbnB1dFRleHRBcnJheT86IFVpbnQ4QXJyYXksIGlucHV0TWV0YURhdGE/OiBJbnQzMkFycmF5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmxhdW5jaChvbkV2ZW50LCBpbnB1dFRleHRBcnJheSwgaW5wdXRNZXRhRGF0YSk7XG4gICAgICAgIHRoaXMucHlvZGlkZSA9IGF3YWl0IGxvYWRQeW9kaWRlKHtcbiAgICAgICAgICAgIGluZGV4VVJMOiBcImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9weW9kaWRlL3YwLjE4LjEvZnVsbC9cIixcbiAgICAgICAgICAgIGZ1bGxTdGRMaWI6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB0aGlzLnJ1bkNvZGUoSU5JVElBTElaQVRJT05fQ09ERSwgMCk7XG4gICAgICAgIC8vIFB5dGhvbiBjYWxscyBvdXIgZnVuY3Rpb24gd2l0aCBhIGRpY3QsIHdoaWNoIG11c3QgYmUgY29udmVydGVkIHRvIGEgUGFweXJvc0V2ZW50XG4gICAgICAgIGNvbnN0IGV2ZW50Q2FsbGJhY2sgPSAoZGF0YTogYW55KTogdm9pZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBqc0V2ZW50OiBQYXB5cm9zRXZlbnQgPSBcInRvSnNcIiBpbiBkYXRhID8gZGF0YS50b0pzKCkgOiBPYmplY3QuZnJvbUVudHJpZXMoZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vbkV2ZW50KGpzRXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnB5b2RpZGUuZ2xvYmFscy5nZXQoSU5JVElBTElaRV9QWVRIT05fQkFDS0VORCkoZXZlbnRDYWxsYmFjayk7XG4gICAgICAgIHRoaXMuZ2xvYmFscyA9IG5ldyBNYXAoKHRoaXMucHlvZGlkZS5nbG9iYWxzIGFzIGFueSkudG9KcygpKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuXG4gICAgX2NsZWFuU2NvcGUoKTogdm9pZCB7XG4gICAgICAgIC8vIEZpbmQgdGhlIG5ld2x5IGFkZGVkIGdsb2JhbHNcbiAgICAgICAgY29uc3QgcHlvZGlkZUdsb2JhbHMgPSB0aGlzLnB5b2RpZGUuZ2xvYmFscztcbiAgICAgICAgY29uc3Qga2V5c1RvUmVtb3ZlOiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHB5b2RpZGVHbG9iYWxzLmtleXMoKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmdsb2JhbHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBrZXlzVG9SZW1vdmUucHVzaChrZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB2YWx1ZSBpbiBjYXNlIGl0IHdhcyBvdmVycmlkZW5cbiAgICAgICAgICAgICAgICBweW9kaWRlR2xvYmFscy5zZXQoa2V5LCB0aGlzLmdsb2JhbHMuZ2V0KGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSB0aGVtIGZyb20gdGhlIGFjdHVhbCBnbG9iYWxzXG4gICAgICAgIC8vIFNlcGFyYXRlIHJ1bnMgb2YgY29kZSBzaG91bGQgbm90IGJlIGFibGUgdG8gYWNjZXNzIHZhcmlhYmxlcy9mdW5jdGlvbnNcbiAgICAgICAgLy8gdGhhdCB3ZXJlIGRlZmluZWQgZWFybGllciBvbiwgYXMgdGhpcyBjb3VsZCBjYXVzZSBub24tb2J2aW91cyBidWdzXG4gICAgICAgIGtleXNUb1JlbW92ZS5mb3JFYWNoKGsgPT4gcHlvZGlkZUdsb2JhbHMuZGVsZXRlKGspKTtcbiAgICB9XG5cbiAgICBvdmVycmlkZSBhc3luYyBfcnVuQ29kZUludGVybmFsKGNvZGU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAvLyBydW4gdGhlIGNvZGUsIHBvdGVudGlhbGx5IHBvbGx1dGluZyB0aGUgbmFtZXNwYWNlXG4gICAgICAgICAgICAvLyBGdW5jdGlvbnMgYW5kIHZhcmlhYmxlcyBkZWZpbmVkIGJ5IHRoZSB1c2VyIGJlY29tZSBnbG9iYWxcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdGhlbSB0byBiZSBnbG9iYWwgdG8gbGV0IGRvY3Rlc3Qgd29yayBvdXQgb2YgdGhlIGJveFxuICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMucHlvZGlkZS5nbG9iYWxzLmdldChQUk9DRVNTX1BZVEhPTl9DT0RFKShjb2RlLCBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnB5b2RpZGUubG9hZFBhY2thZ2VzRnJvbUltcG9ydHMoY29kZSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5weW9kaWRlLmdsb2JhbHMuZ2V0KFBST0NFU1NfUFlUSE9OX0NPREUpKGNvZGUsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2xlYW51cCB0aGUgc2NvcGUgYWZ0ZXIgY29tcHV0YXRpb25zIGFyZSBkb25lXG4gICAgICAgICAgICAvLyBFdmVuIGluIGNhc2Ugb2YgZXJyb3JzXG4gICAgICAgICAgICB0aGlzLl9jbGVhblNjb3BlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnB5b2RpZGUubG9hZFBhY2thZ2VzRnJvbUltcG9ydHMoY29kZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5weW9kaWRlLnJ1blB5dGhvbkFzeW5jKGNvZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvc2UobmV3IFB5dGhvbldvcmtlcigpKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gdGhlIHN0YXJ0dXAgZnVuY3Rpb25cbl9fd2VicGFja19yZXF1aXJlX18ueCA9ICgpID0+IHtcblx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5cdC8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxuXHR2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFsxMTRdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg1NzIpKSlcblx0X193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcblx0cmV0dXJuIF9fd2VicGFja19leHBvcnRzX187XG59O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzIGFuZCBzaWJsaW5nIGNodW5rcyBmb3IgdGhlIGVudHJ5cG9pbnRcbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgY2h1bmtzXG4vLyBcIjFcIiBtZWFucyBcImFscmVhZHkgbG9hZGVkXCJcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDU3MjogMVxufTtcblxuLy8gaW1wb3J0U2NyaXB0cyBjaHVuayBsb2FkaW5nXG52YXIgaW5zdGFsbENodW5rID0gKGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR3aGlsZShjaHVua0lkcy5sZW5ndGgpXG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzLnBvcCgpXSA9IDE7XG5cdHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xufTtcbl9fd2VicGFja19yZXF1aXJlX18uZi5pID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdC8vIFwiMVwiIGlzIHRoZSBzaWduYWwgZm9yIFwiYWxyZWFkeSBsb2FkZWRcIlxuXHRpZighaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdGltcG9ydFNjcmlwdHMoX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpKTtcblx0XHR9XG5cdH1cbn07XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rcGFweXJvc1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtwYXB5cm9zXCJdIHx8IFtdO1xudmFyIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uID0gY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSBpbnN0YWxsQ2h1bms7XG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3QiLCIvLyBydW4gc3RhcnR1cFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLngoKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsIm5leHQiLCJJTklUSUFMSVpFX1BZVEhPTl9CQUNLRU5EIiwiUFJPQ0VTU19QWVRIT05fQ09ERSIsIklOSVRJQUxJWkFUSU9OX0NPREUiLCJpbXBvcnRTY3JpcHRzIiwicHlvZGlkZSIsImluaXRpYWxpemVkIiwiZ2xvYmFscyIsIk1hcCIsImxhdW5jaCIsIm9uRXZlbnQiLCJpbnB1dFRleHRBcnJheSIsImlucHV0TWV0YURhdGEiLCJ0aGlzIiwibG9hZFB5b2RpZGUiLCJpbmRleFVSTCIsImZ1bGxTdGRMaWIiLCJydW5Db2RlIiwiZXZlbnRDYWxsYmFjayIsImRhdGEiLCJqc0V2ZW50IiwidG9KcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZ2V0IiwiX2NsZWFuU2NvcGUiLCJweW9kaWRlR2xvYmFscyIsImtleXNUb1JlbW92ZSIsImtleXMiLCJrZXkiLCJoYXMiLCJzZXQiLCJwdXNoIiwiZm9yRWFjaCIsImsiLCJkZWxldGUiLCJfcnVuQ29kZUludGVybmFsIiwiY29kZSIsImxvYWRQYWNrYWdlc0Zyb21JbXBvcnRzIiwicnVuUHl0aG9uQXN5bmMiLCJCYWNrZW5kIiwiUHl0aG9uV29ya2VyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwieCIsIl9fd2VicGFja19leHBvcnRzX18iLCJPIiwicmVzdWx0IiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJpIiwibGVuZ3RoIiwiZnVsZmlsbGVkIiwiaiIsImV2ZXJ5Iiwic3BsaWNlIiwiciIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImYiLCJlIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwid2luZG93Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiRXJyb3IiLCJyZXBsYWNlIiwicCIsImluc3RhbGxlZENodW5rcyIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImJpbmQiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJwb3AiLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==