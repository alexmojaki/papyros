export declare const INITIALIZATION_CODE = "\nfrom pyodide import to_js\nimport sys\n\ndef __override_builtins(cb):\n    __capture_stdout(cb)\n    __override_stdin(cb)\n    # set name to main instead of builtins\n    globals()[\"__name__\"] = \"__main__\"\n\ndef __capture_stdout(cb):\n    class _OutputWriter:\n        def __init__(self):\n            self.encoding = \"utf-8\"\n            \n        def write(self, s):\n            cb(to_js({\"type\": \"output\", \"data\":s}))\n\n        def flush(self):\n            pass # Given data is always immediately written\n\n    sys.stdout = _OutputWriter()\n\n__papyros_input = \"\"\ndef __override_stdin(cb):\n\n    def __papyros_input(prompt=\"\"):\n        return __papyros_readline(prompt=prompt)[:-1] # Remove newline\n\n    def __papyros_readline(n=-1, prompt=\"\"):\n        global __papyros_input\n        if not __papyros_input:\n            __papyros_input = cb(to_js({\"type\": \"input\", \"data\": prompt})) + \"\\n\"\n        if n < 0 or n > len(__papyros_input):\n            n = len(__papyros_input)\n        to_return = __papyros_input[0:n]\n        __papyros_input = __papyros_input[n:]\n        return to_return\n\n    global input\n    input = __papyros_input\n    sys.stdin.readline = __papyros_readline\n";
