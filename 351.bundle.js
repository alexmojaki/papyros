(()=>{"use strict";const t=Symbol("Comlink.proxy"),e=Symbol("Comlink.endpoint"),n=Symbol("Comlink.releaseProxy"),r=Symbol("Comlink.thrown"),o=t=>"object"==typeof t&&null!==t||"function"==typeof t,i=new Map([["proxy",{canHandle:e=>o(e)&&e[t],serialize(t){const{port1:e,port2:n}=new MessageChannel;return a(t,e),[n,[n]]},deserialize:t=>(t.start(),c(t,[],undefined))}],["throw",{canHandle:t=>o(t)&&r in t,serialize({value:t}){let e;return e=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[e,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function a(e,n=self){n.addEventListener("message",(function o(i){if(!i||!i.data)return;const{id:u,type:c,path:l}=Object.assign({path:[]},i.data),h=(i.data.argumentList||[]).map(d);let y;try{const n=l.slice(0,-1).reduce(((t,e)=>t[e]),e),r=l.reduce(((t,e)=>t[e]),e);switch(c){case"GET":y=r;break;case"SET":n[l.slice(-1)[0]]=d(i.data.value),y=!0;break;case"APPLY":y=r.apply(n,h);break;case"CONSTRUCT":y=function(e){return Object.assign(e,{[t]:!0})}(new r(...h));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;a(e,n),y=function(t,e){return p.set(t,e),t}(t,[t])}break;case"RELEASE":y=void 0;break;default:return}}catch(t){y={value:t,[r]:0}}Promise.resolve(y).catch((t=>({value:t,[r]:0}))).then((t=>{const[e,r]=f(t);n.postMessage(Object.assign(Object.assign({},e),{id:u}),r),"RELEASE"===c&&(n.removeEventListener("message",o),s(n))}))})),n.start&&n.start()}function s(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function u(t){if(t)throw new Error("Proxy has been released and is not useable")}function c(t,r=[],o=function(){}){let i=!1;const a=new Proxy(o,{get(e,o){if(u(i),o===n)return()=>h(t,{type:"RELEASE",path:r.map((t=>t.toString()))}).then((()=>{s(t),i=!0}));if("then"===o){if(0===r.length)return{then:()=>a};const e=h(t,{type:"GET",path:r.map((t=>t.toString()))}).then(d);return e.then.bind(e)}return c(t,[...r,o])},set(e,n,o){u(i);const[a,s]=f(o);return h(t,{type:"SET",path:[...r,n].map((t=>t.toString())),value:a},s).then(d)},apply(n,o,a){u(i);const s=r[r.length-1];if(s===e)return h(t,{type:"ENDPOINT"}).then(d);if("bind"===s)return c(t,r.slice(0,-1));const[p,f]=l(a);return h(t,{type:"APPLY",path:r.map((t=>t.toString())),argumentList:p},f).then(d)},construct(e,n){u(i);const[o,a]=l(n);return h(t,{type:"CONSTRUCT",path:r.map((t=>t.toString())),argumentList:o},a).then(d)}});return a}function l(t){const e=t.map(f);return[e.map((t=>t[0])),(n=e.map((t=>t[1])),Array.prototype.concat.apply([],n))];var n}const p=new WeakMap;function f(t){for(const[e,n]of i)if(n.canHandle(t)){const[r,o]=n.serialize(t);return[{type:"HANDLER",name:e,value:r},o]}return[{type:"RAW",value:t},p.get(t)||[]]}function d(t){switch(t.type){case"HANDLER":return i.get(t.name).deserialize(t.value);case"RAW":return t.value}}function h(t,e,n){return new Promise((r=>{const o=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.addEventListener("message",(function e(n){n.data&&n.data.id&&n.data.id===o&&(t.removeEventListener("message",e),r(n.data))})),t.start&&t.start(),t.postMessage(Object.assign({id:o},e),n)}))}var y,v=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},b=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))};function _(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=t!==y.Debug;r&&(t===y.Error?console.error.apply(console,b([],v(e),!1)):console.log.apply(console,b([],v(e),!1)))}!function(t){t[t.Debug=0]="Debug",t[t.Error=1]="Error",t[t.Important=2]="Important"}(y||(y={}));var m,g=function(){function t(){this.onEvent=function(){}}return t.prototype.launch=function(t,e,n){var r=function(t,e){if(t&&e){var n=new TextDecoder;return function(){for(;"timed-out"===Atomics.wait(e,0,0,100););Atomics.store(e,0,0);var r=Atomics.exchange(e,1,0),o=t.slice(0,r);return n.decode(o)}}return function(){var t=new XMLHttpRequest;do{t.open("GET","/__papyros_input",!1),t.send(null)}while(t.status>=400);return t.responseText}}(e,n);return this.onEvent=function(e){if(t(e),"input"===e.type)return r()},Promise.resolve()},t.prototype.runCode=function(t){return e=this,n=void 0,o=function(){var e,n,r;return function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(o){switch(o.label){case 0:_(y.Debug,"Running code in worker: ",t),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,this._runCodeInternal(t)];case 2:return e=o.sent(),_(y.Important,"ran code: "+t+" and received: ",e),[2,this.onEvent({type:"success",data:e})];case 3:return n=o.sent(),r="toString"in n?n.toString():JSON.stringify(n),_(y.Error,"Error during execution: ",n,r),[2,this.onEvent({type:"error",data:r})];case 4:return[2]}}))},new((r=void 0)||(r=Promise))((function(t,i){function a(t){try{u(o.next(t))}catch(t){i(t)}}function s(t){try{u(o.throw(t))}catch(t){i(t)}}function u(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(a,s)}u((o=o.apply(e,n||[])).next())}));var e,n,r,o},t}(),w=(m=function(t,e){return m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},m(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}m(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),E=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},S=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};importScripts("https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js"),a(new(function(t){function e(){var e=t.call(this)||this;return e.pyodide={},e.initialized=!1,e}return w(e,t),e.prototype.launch=function(e,n,r){return E(this,void 0,void 0,(function(){var o,i,a=this;return S(this,(function(s){switch(s.label){case 0:return[4,t.prototype.launch.call(this,e,n,r)];case 1:return s.sent(),[4,loadPyodide({indexURL:"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/",fullStdLib:!0})];case 2:return o=s.sent(),this.pyodide=o,[4,this.runCode('\nfrom pyodide import to_js\nimport sys\n\ndef __override_builtins(cb):\n    __capture_stdout(cb)\n    __override_stdin(cb)\n\ndef __capture_stdout(cb):\n    class _OutputWriter:\n\n        def write(self, s):\n            cb(to_js({"type": "output", "data":s}))\n\n        def flush(self):\n            pass # Given data is always immediately written\n\n    global print\n    __original_print = print\n    __writer = _OutputWriter()\n\n    def __dodona_print(*objects, sep=\' \', end=\'\\n\', file=sys.stdout, flush=False):\n        if file == sys.stdout:\n            __original_print(*objects, sep=sep, end=end, file=__writer, flush=flush)\n        else:\n            __original_print(*objects, sep=sep, end=end, file=file, flush=flush)\n\n    print = __dodona_print\n\ndef __override_stdin(cb):\n    global input\n    def __dodona_input(prompt=""):\n        print(prompt, end="")\n        user_value = cb(to_js({"type": "input", "data":prompt}))\n        print(user_value)\n        return user_value\n\n    input = __dodona_input\n\ndef __run_code(code):\n    return exec(code, dict(globals()))\n')];case 3:return s.sent(),i=function(t){return a.onEvent(Object.fromEntries(t))},this.pyodide.globals.get("__override_builtins")(i),this.initialized=!0,[2]}}))}))},e.prototype._runCodeInternal=function(t){return E(this,void 0,void 0,(function(){return S(this,(function(e){switch(e.label){case 0:return[4,this.pyodide.loadPackagesFromImports(t)];case 1:return e.sent(),this.initialized?[2,this.pyodide.globals.get("__run_code")(t)]:[2,this.pyodide.runPythonAsync(t)]}}))}))},e}(g)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,