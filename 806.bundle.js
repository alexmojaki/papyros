(()=>{"use strict";var r,t,n={806:(r,t,n)=>{var e,o=n(375),i=n(872),a=(e=function(r,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])},e(r,t)},function(r,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=r}e(r,t),r.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(r,t){var n="function"==typeof Symbol&&r[Symbol.iterator];if(!n)return r;var e,o,i=n.call(r),a=[];try{for(;(void 0===t||t-- >0)&&!(e=i.next()).done;)a.push(e.value)}catch(r){o={error:r}}finally{try{e&&!e.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},p=function(r){function t(){return null!==r&&r.apply(this,arguments)||this}return a(t,r),t.prototype._runCodeInternal=function(r){var t,n,e=new Map([["prompt","__prompt"],["console.log","__papyros_log"],["console.error","__papyros_error"]]),o={__onEvent:this.onEvent.bind(this)},i=[],a=[];for(var p in o)Object.prototype.hasOwnProperty.call(o,p)&&a.push("const ".concat(p," = ctx['").concat(p,"'];"));try{for(var c=function(r){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&r[t],e=0;if(n)return n.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&e>=r.length&&(r=void 0),{value:r&&r[e++],done:!r}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e.entries()),u=c.next();!u.done;u=c.next()){var l=s(u.value,2),f=l[0],y=l[1];a.push("".concat(y," = ").concat(f)),i.push("".concat(f," = ").concat(y))}}catch(r){t={error:r}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(t)throw t.error}}a.push('\nfunction prompt(text="", defaultText=""){\n    __onEvent({"type": "output", "data": text});\n    const promptedValue = __onEvent({"type": "input", "data": text});\n    __onEvent({"type": "output", "data": promptedValue + "\\n"});\n    return promptedValue;\n}\nfunction __stringify(args, addNewline=false){\n    let asString = "";\n    if(Array.isArray(args)){\n        if(args.length === 1){\n            asString = JSON.stringify(args[0]);\n        } else {\n            asString = args.map(s => {\n                if(typeof s === \'string\' || s instanceof String){\n                    return s; // prevent spurious quotes\n                } else {\n                    return JSON.stringify(s);\n                }\n            }).join(" ");\n        }\n    } else {\n        asString = JSON.stringify(args);\n    }\n    if(addNewline){\n        asString += "\\n";\n    }\n    return asString;\n}\nconsole.log = (...args) => {\n    __onEvent({"type": "output", "data": __stringify(args, true)});\n}\nconsole.error = (...args) => {\n    __onEvent({"type": "error", "data": __stringify(args, true)});\n}\n        '),a.push("\ntry {\n".concat(r,"\n} finally {\n").concat(i.join("\n"),"\n}\n        "));var g=a.join("\n");return Promise.resolve(new Function("ctx",g)(o))},t}(i.z);(0,o.Jj)(new p)}},e={};function o(r){var t=e[r];if(void 0!==t)return t.exports;var i=e[r]={exports:{}};return n[r](i,i.exports,o),i.exports}o.m=n,o.x=()=>{var r=o.O(void 0,[114],(()=>o(806)));return o.O(r)},r=[],o.O=(t,n,e,i)=>{if(!n){var a=1/0;for(u=0;u<r.length;u++){for(var[n,e,i]=r[u],s=!0,p=0;p<n.length;p++)(!1&i||a>=i)&&Object.keys(o.O).every((r=>o.O[r](n[p])))?n.splice(p--,1):(s=!1,i<a&&(a=i));if(s){r.splice(u--,1);var c=e();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=r.length;u>0&&r[u-1][2]>i;u--)r[u]=r[u-1];r[u]=[n,e,i]},o.d=(r,t)=>{for(var n in t)o.o(t,n)&&!o.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o.f={},o.e=r=>Promise.all(Object.keys(o.f).reduce(((t,n)=>(o.f[n](r,t),t)),[])),o.u=r=>r+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),o.o=(r,t)=>Object.prototype.hasOwnProperty.call(r,t),(()=>{var r;o.g.importScripts&&(r=o.g.location+"");var t=o.g.document;if(!r&&t&&(t.currentScript&&(r=t.currentScript.src),!r)){var n=t.getElementsByTagName("script");n.length&&(r=n[n.length-1].src)}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=r})(),(()=>{var r={806:1};o.f.i=(t,n)=>{r[t]||importScripts(o.p+o.u(t))};var t=self.webpackChunkpapyros=self.webpackChunkpapyros||[],n=t.push.bind(t);t.push=t=>{var[e,i,a]=t;for(var s in i)o.o(i,s)&&(o.m[s]=i[s]);for(a&&a(o);e.length;)r[e.pop()]=1;n(t)}})(),t=o.x,o.x=()=>o.e(114).then(t),o.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,