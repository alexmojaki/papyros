(()=>{"use strict";var r,t,n={806:(r,t,n)=>{var e,o=n(375),i=n(872),a=(e=function(r,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])},e(r,t)},function(r,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=r}e(r,t),r.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(r,t){var n="function"==typeof Symbol&&r[Symbol.iterator];if(!n)return r;var e,o,i=n.call(r),a=[];try{for(;(void 0===t||t-- >0)&&!(e=i.next()).done;)a.push(e.value)}catch(r){o={error:r}}finally{try{e&&!e.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},p=function(r){function t(){return null!==r&&r.apply(this,arguments)||this}return a(t,r),t.prototype._runCodeInternal=function(r){var t,n,e=new Map([["prompt","__prompt"],["console.log","__papyros_log"],["console.error","__papyros_error"]]),o={__onEvent:this.onEvent.bind(this)},i=[],a=[];for(var p in o)Object.prototype.hasOwnProperty.call(o,p)&&a.push("const "+p+" = ctx['"+p+"'];");try{for(var u=function(r){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&r[t],e=0;if(n)return n.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&e>=r.length&&(r=void 0),{value:r&&r[e++],done:!r}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e.entries()),l=u.next();!l.done;l=u.next()){var c=s(l.value,2),f=c[0],y=c[1];a.push(y+" = "+f),i.push(f+" = "+y)}}catch(r){t={error:r}}finally{try{l&&!l.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}a.push('\nfunction prompt(text="", defaultText=""){\n    __onEvent({"type": "output", "data": text});\n    const promptedValue = __onEvent({"type": "input", "data": text});\n    __onEvent({"type": "output", "data": promptedValue + "\\n"});\n    return promptedValue;\n}\nfunction __stringify(args, addNewline=false){\n    let asString = "";\n    if(Array.isArray(args)){\n        if(args.length === 1){\n            asString = JSON.stringify(args[0]);\n        } else {\n            asString = args.map(s => {\n                if(typeof s === \'string\' || s instanceof String){\n                    return s; // prevent spurious quotes\n                } else {\n                    return JSON.stringify(s);\n                }\n            }).join(" ");\n        }\n    } else {\n        asString = JSON.stringify(args);\n    }\n    if(addNewline){\n        asString += "\\n";\n    }\n    return asString;\n}\nconsole.log = (...args) => {\n    __onEvent({"type": "output", "data": __stringify(args, true)});\n}\nconsole.error = (...args) => {\n    __onEvent({"type": "error", "data": __stringify(args, true)});\n}\n        '),a.push("\ntry {\n"+r+"\n} finally {\n"+i.join("\n")+"\n}\n        ");var g=a.join("\n");return Promise.resolve(new Function("ctx",g)(o))},t}(i.z);(0,o.Jj)(new p)}},e={};function o(r){var t=e[r];if(void 0!==t)return t.exports;var i=e[r]={exports:{}};return n[r](i,i.exports,o),i.exports}o.m=n,o.x=()=>{var r=o.O(void 0,[114],(()=>o(806)));return o.O(r)},r=[],o.O=(t,n,e,i)=>{if(!n){var a=1/0;for(l=0;l<r.length;l++){for(var[n,e,i]=r[l],s=!0,p=0;p<n.length;p++)(!1&i||a>=i)&&Object.keys(o.O).every((r=>o.O[r](n[p])))?n.splice(p--,1):(s=!1,i<a&&(a=i));if(s){r.splice(l--,1);var u=e();void 0!==u&&(t=u)}}return t}i=i||0;for(var l=r.length;l>0&&r[l-1][2]>i;l--)r[l]=r[l-1];r[l]=[n,e,i]},o.d=(r,t)=>{for(var n in t)o.o(t,n)&&!o.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o.f={},o.e=r=>Promise.all(Object.keys(o.f).reduce(((t,n)=>(o.f[n](r,t),t)),[])),o.u=r=>r+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),o.o=(r,t)=>Object.prototype.hasOwnProperty.call(r,t),(()=>{var r;o.g.importScripts&&(r=o.g.location+"");var t=o.g.document;if(!r&&t&&(t.currentScript&&(r=t.currentScript.src),!r)){var n=t.getElementsByTagName("script");n.length&&(r=n[n.length-1].src)}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=r})(),(()=>{var r={806:1};o.f.i=(t,n)=>{r[t]||importScripts(o.p+o.u(t))};var t=self.webpackChunkpapyros=self.webpackChunkpapyros||[],n=t.push.bind(t);t.push=t=>{var[e,i,a]=t;for(var s in i)o.o(i,s)&&(o.m[s]=i[s]);for(a&&a(o);e.length;)r[e.pop()]=1;n(t)}})(),t=o.x,o.x=()=>o.e(114).then(t),o.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RWxCVyxjQUFjNUMsRUFBb0JxRCxFQUFJckQsRUFBb0JxQyxFQUFFSixLQUsvRCxJQUFJc0IsRUFBcUJDLEtBQTBCLG9CQUFJQSxLQUEwQixxQkFBSyxHQUNsRkMsRUFBNkJGLEVBQW1CbEUsS0FBS1IsS0FBSzBFLEdBQzlEQSxFQUFtQmxFLEtBdkJDcUUsSUFDbkIsSUFBSzlDLEVBQVUrQyxFQUFhQyxHQUFXRixFQUN2QyxJQUFJLElBQUl6RCxLQUFZMEQsRUFDaEIzRCxFQUFvQjJCLEVBQUVnQyxFQUFhMUQsS0FDckNELEVBQW9CTyxFQUFFTixHQUFZMEQsRUFBWTFELElBSWhELElBREcyRCxHQUFTQSxFQUFRNUQsR0FDZFksRUFBU0ssUUFDZHFDLEVBQWdCMUMsRUFBU2lELE9BQVMsRUFDbkNKLEVBQTJCQyxLLEdUbkJ4QnJGLEVBQU8yQixFQUFvQlEsRUFDL0JSLEVBQW9CUSxFQUFJLElBQ2hCUixFQUFvQmdDLEVBQUUsS0FBSzhCLEtBQUt6RixHVURkMkIsRUFBb0JRLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvc3RhcnR1cCBjaHVuayBkZXBlbmRlbmNpZXMiLCJ3ZWJwYWNrOi8vcGFweXJvcy8uL3NyYy93b3JrZXJzL2phdmFzY3JpcHQvSmF2YVNjcmlwdFdvcmtlci53b3JrZXIudHMiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vcGFweXJvcy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3BhcHlyb3Mvd2VicGFjay9ydW50aW1lL2ltcG9ydFNjcmlwdHMgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9wYXB5cm9zL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgbmV4dCA9IF9fd2VicGFja19yZXF1aXJlX18ueDtcbl9fd2VicGFja19yZXF1aXJlX18ueCA9ICgpID0+IHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZSgxMTQpLnRoZW4obmV4dCk7XG59OyIsImltcG9ydCB7IGV4cG9zZSB9IGZyb20gXCJjb21saW5rXCI7XG5pbXBvcnQgeyBCYWNrZW5kIH0gZnJvbSBcIi4uLy4uL0JhY2tlbmRcIjtcblxuXG5jbGFzcyBKYXZhU2NyaXB0V29ya2VyIGV4dGVuZHMgQmFja2VuZCB7XG4gICAgb3ZlcnJpZGUgX3J1bkNvZGVJbnRlcm5hbChjb2RlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCB0b1Jlc3RvcmUgPSBuZXcgTWFwKFtcbiAgICAgICAgICAgIFtcInByb21wdFwiLCBcIl9fcHJvbXB0XCJdLFxuICAgICAgICAgICAgW1wiY29uc29sZS5sb2dcIiwgXCJfX3BhcHlyb3NfbG9nXCJdLFxuICAgICAgICAgICAgW1wiY29uc29sZS5lcnJvclwiLCBcIl9fcGFweXJvc19lcnJvclwiXVxuICAgICAgICBdKTtcbiAgICAgICAgY29uc3Qgb3ZlcnJpZGVCdWlsdGlucyA9IGBcbmZ1bmN0aW9uIHByb21wdCh0ZXh0PVwiXCIsIGRlZmF1bHRUZXh0PVwiXCIpe1xuICAgIF9fb25FdmVudCh7XCJ0eXBlXCI6IFwib3V0cHV0XCIsIFwiZGF0YVwiOiB0ZXh0fSk7XG4gICAgY29uc3QgcHJvbXB0ZWRWYWx1ZSA9IF9fb25FdmVudCh7XCJ0eXBlXCI6IFwiaW5wdXRcIiwgXCJkYXRhXCI6IHRleHR9KTtcbiAgICBfX29uRXZlbnQoe1widHlwZVwiOiBcIm91dHB1dFwiLCBcImRhdGFcIjogcHJvbXB0ZWRWYWx1ZSArIFwiXFxcXG5cIn0pO1xuICAgIHJldHVybiBwcm9tcHRlZFZhbHVlO1xufVxuZnVuY3Rpb24gX19zdHJpbmdpZnkoYXJncywgYWRkTmV3bGluZT1mYWxzZSl7XG4gICAgbGV0IGFzU3RyaW5nID0gXCJcIjtcbiAgICBpZihBcnJheS5pc0FycmF5KGFyZ3MpKXtcbiAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDEpe1xuICAgICAgICAgICAgYXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShhcmdzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFzU3RyaW5nID0gYXJncy5tYXAocyA9PiB7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHMgPT09ICdzdHJpbmcnIHx8IHMgaW5zdGFuY2VvZiBTdHJpbmcpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gczsgLy8gcHJldmVudCBzcHVyaW91cyBxdW90ZXNcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuam9pbihcIiBcIik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBhc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGFyZ3MpO1xuICAgIH1cbiAgICBpZihhZGROZXdsaW5lKXtcbiAgICAgICAgYXNTdHJpbmcgKz0gXCJcXFxcblwiO1xuICAgIH1cbiAgICByZXR1cm4gYXNTdHJpbmc7XG59XG5jb25zb2xlLmxvZyA9ICguLi5hcmdzKSA9PiB7XG4gICAgX19vbkV2ZW50KHtcInR5cGVcIjogXCJvdXRwdXRcIiwgXCJkYXRhXCI6IF9fc3RyaW5naWZ5KGFyZ3MsIHRydWUpfSk7XG59XG5jb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcbiAgICBfX29uRXZlbnQoe1widHlwZVwiOiBcImVycm9yXCIsIFwiZGF0YVwiOiBfX3N0cmluZ2lmeShhcmdzLCB0cnVlKX0pO1xufVxuICAgICAgICBgO1xuICAgICAgICBjb25zdCBuZXdDb250ZXh0ID0ge1xuICAgICAgICAgICAgXCJfX29uRXZlbnRcIjogdGhpcy5vbkV2ZW50LmJpbmQodGhpcylcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdG9yZUJ1aWx0aW5zID0gW107XG4gICAgICAgIGNvbnN0IG5ld0JvZHkgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBrIGluIG5ld0NvbnRleHQpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV3Q29udGV4dCwgaykpIHtcbiAgICAgICAgICAgICAgICBuZXdCb2R5LnB1c2goYGNvbnN0ICR7a30gPSBjdHhbJyR7a30nXTtgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFtmbiwgYmFja3VwXSBvZiB0b1Jlc3RvcmUuZW50cmllcygpKSB7XG4gICAgICAgICAgICBuZXdCb2R5LnB1c2goYCR7YmFja3VwfSA9ICR7Zm59YCk7XG4gICAgICAgICAgICByZXN0b3JlQnVpbHRpbnMucHVzaChgJHtmbn0gPSAke2JhY2t1cH1gKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdCb2R5LnB1c2gob3ZlcnJpZGVCdWlsdGlucyk7XG4gICAgICAgIG5ld0JvZHkucHVzaChgXG50cnkge1xuJHtjb2RlfVxufSBmaW5hbGx5IHtcbiR7cmVzdG9yZUJ1aWx0aW5zLmpvaW4oXCJcXG5cIil9XG59XG4gICAgICAgIGApO1xuICAgICAgICBjb25zdCBmbkJvZHkgPSBuZXdCb2R5LmpvaW4oXCJcXG5cIik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBGdW5jdGlvbihcImN0eFwiLCBmbkJvZHkpKG5ld0NvbnRleHQpKTtcbiAgICB9XG59XG5cbmV4cG9zZShuZXcgSmF2YVNjcmlwdFdvcmtlcigpKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gdGhlIHN0YXJ0dXAgZnVuY3Rpb25cbl9fd2VicGFja19yZXF1aXJlX18ueCA9ICgpID0+IHtcblx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5cdC8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxuXHR2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFsxMTRdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg4MDYpKSlcblx0X193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcblx0cmV0dXJuIF9fd2VicGFja19leHBvcnRzX187XG59O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzIGFuZCBzaWJsaW5nIGNodW5rcyBmb3IgdGhlIGVudHJ5cG9pbnRcbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgY2h1bmtzXG4vLyBcIjFcIiBtZWFucyBcImFscmVhZHkgbG9hZGVkXCJcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDgwNjogMVxufTtcblxuLy8gaW1wb3J0U2NyaXB0cyBjaHVuayBsb2FkaW5nXG52YXIgaW5zdGFsbENodW5rID0gKGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR3aGlsZShjaHVua0lkcy5sZW5ndGgpXG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzLnBvcCgpXSA9IDE7XG5cdHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xufTtcbl9fd2VicGFja19yZXF1aXJlX18uZi5pID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdC8vIFwiMVwiIGlzIHRoZSBzaWduYWwgZm9yIFwiYWxyZWFkeSBsb2FkZWRcIlxuXHRpZighaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdGltcG9ydFNjcmlwdHMoX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpKTtcblx0XHR9XG5cdH1cbn07XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rcGFweXJvc1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtwYXB5cm9zXCJdIHx8IFtdO1xudmFyIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uID0gY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSBpbnN0YWxsQ2h1bms7XG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3QiLCIvLyBydW4gc3RhcnR1cFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLngoKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsIm5leHQiLCJfcnVuQ29kZUludGVybmFsIiwiY29kZSIsInRvUmVzdG9yZSIsIk1hcCIsIm5ld0NvbnRleHQiLCJ0aGlzIiwib25FdmVudCIsImJpbmQiLCJyZXN0b3JlQnVpbHRpbnMiLCJuZXdCb2R5IiwiayIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInB1c2giLCJlbnRyaWVzIiwiZm4iLCJiYWNrdXAiLCJqb2luIiwiZm5Cb2R5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJGdW5jdGlvbiIsIkphdmFTY3JpcHRXb3JrZXIiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJ4IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIk8iLCJyZXN1bHQiLCJjaHVua0lkcyIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJpIiwibGVuZ3RoIiwiZnVsZmlsbGVkIiwiaiIsImtleXMiLCJldmVyeSIsImtleSIsInNwbGljZSIsInIiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiZSIsImNodW5rSWQiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJnIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsIm9iaiIsInByb3AiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJkb2N1bWVudCIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJFcnJvciIsInJlcGxhY2UiLCJwIiwiaW5zdGFsbGVkQ2h1bmtzIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiZGF0YSIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInBvcCIsInRoZW4iXSwic291cmNlUm9vdCI6IiJ9