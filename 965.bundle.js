"use strict";(self.webpackChunkpapyros=self.webpackChunkpapyros||[]).push([[965],{29:(e,t,n)=>{var r;n.d(t,{z:()=>o}),function(e){e.Python="Python",e.JavaScript="JavaScript"}(r||(r={})),r.Python,r.JavaScript,new Map([["python",r.Python],["javascript",r.JavaScript]]),r.Python;var a=n(155),o=function(){function e(){this.onEvent=function(){},this.runId=0}return e.prototype.launch=function(e,t,n){var r=this,a=function(e,t){if(e&&t){var n=new TextDecoder;return function(){for(;"timed-out"===Atomics.wait(t,0,0,100););Atomics.store(t,0,0);var r=Atomics.exchange(t,1,0),a=e.slice(0,r);return n.decode(a)}}return function(){var e=new XMLHttpRequest;do{e.open("GET","/__papyros_input",!1),e.send(null)}while(e.status>=400);return e.responseText}}(t,n);return this.onEvent=function(t){if(t.runId=r.runId,e(t),"input"===t.type)return a()},Promise.resolve()},e.prototype.runCode=function(e,t){return n=this,r=void 0,i=function(){var n,r,o;return function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(i){switch(i.label){case 0:this.runId=t,(0,a.V)(a.h.Debug,"Running code in worker: ",e),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this._runCodeInternal(e)];case 2:return n=i.sent(),(0,a.V)(a.h.Important,"ran code: "+e+" and received: ",n),[2,this.onEvent({type:"success",data:JSON.stringify(n),runId:t})];case 3:return r=i.sent(),o="string"!=typeof r&&"toString"in r?r.toString():JSON.stringify(r),(0,a.V)(a.h.Error,"Error during execution: ",r,o),[2,this.onEvent({type:"error",data:o,runId:t})];case 4:return[2]}}))},new((o=void 0)||(o=Promise))((function(e,t){function a(e){try{c(i.next(e))}catch(e){t(e)}}function s(e){try{c(i.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o((function(e){e(n)}))).then(a,s)}c((i=i.apply(n,r||[])).next())}));var n,r,o,i},e}()},155:(e,t,n)=>{n.d(t,{h:()=>r,V:()=>i});var r,a=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};function i(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=e!==r.Debug;i&&(e===r.Error?console.error.apply(console,o([],a(t),!1)):console.log.apply(console,o([],a(t),!1)))}!function(e){e[e.Debug=0]="Debug",e[e.Error=1]="Error",e[e.Important=2]="Important"}(r||(r={}))},375:(e,t,n)=>{n.d(t,{Jj:()=>u});const r=Symbol("Comlink.proxy"),a=Symbol("Comlink.endpoint"),o=Symbol("Comlink.releaseProxy"),i=Symbol("Comlink.thrown"),s=e=>"object"==typeof e&&null!==e||"function"==typeof e,c=new Map([["proxy",{canHandle:e=>s(e)&&e[r],serialize(e){const{port1:t,port2:n}=new MessageChannel;return u(e,t),[n,[n]]},deserialize:e=>(e.start(),f(e,[],undefined))}],["throw",{canHandle:e=>s(e)&&i in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function u(e,t=self){t.addEventListener("message",(function n(a){if(!a||!a.data)return;const{id:o,type:s,path:c}=Object.assign({path:[]},a.data),p=(a.data.argumentList||[]).map(v);let f;try{const t=c.slice(0,-1).reduce(((e,t)=>e[t]),e),n=c.reduce(((e,t)=>e[t]),e);switch(s){case"GET":f=n;break;case"SET":t[c.slice(-1)[0]]=v(a.data.value),f=!0;break;case"APPLY":f=n.apply(t,p);break;case"CONSTRUCT":f=function(e){return Object.assign(e,{[r]:!0})}(new n(...p));break;case"ENDPOINT":{const{port1:t,port2:n}=new MessageChannel;u(e,n),f=function(e,t){return y.set(e,t),e}(t,[t])}break;case"RELEASE":f=void 0;break;default:return}}catch(e){f={value:e,[i]:0}}Promise.resolve(f).catch((e=>({value:e,[i]:0}))).then((e=>{const[r,a]=d(e);t.postMessage(Object.assign(Object.assign({},r),{id:o}),a),"RELEASE"===s&&(t.removeEventListener("message",n),l(t))}))})),t.start&&t.start()}function l(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function p(e){if(e)throw new Error("Proxy has been released and is not useable")}function f(e,t=[],n=function(){}){let r=!1;const i=new Proxy(n,{get(n,a){if(p(r),a===o)return()=>m(e,{type:"RELEASE",path:t.map((e=>e.toString()))}).then((()=>{l(e),r=!0}));if("then"===a){if(0===t.length)return{then:()=>i};const n=m(e,{type:"GET",path:t.map((e=>e.toString()))}).then(v);return n.then.bind(n)}return f(e,[...t,a])},set(n,a,o){p(r);const[i,s]=d(o);return m(e,{type:"SET",path:[...t,a].map((e=>e.toString())),value:i},s).then(v)},apply(n,o,i){p(r);const s=t[t.length-1];if(s===a)return m(e,{type:"ENDPOINT"}).then(v);if("bind"===s)return f(e,t.slice(0,-1));const[c,u]=h(i);return m(e,{type:"APPLY",path:t.map((e=>e.toString())),argumentList:c},u).then(v)},construct(n,a){p(r);const[o,i]=h(a);return m(e,{type:"CONSTRUCT",path:t.map((e=>e.toString())),argumentList:o},i).then(v)}});return i}function h(e){const t=e.map(d);return[t.map((e=>e[0])),(n=t.map((e=>e[1])),Array.prototype.concat.apply([],n))];var n}const y=new WeakMap;function d(e){for(const[t,n]of c)if(n.canHandle(e)){const[r,a]=n.serialize(e);return[{type:"HANDLER",name:t,value:r},a]}return[{type:"RAW",value:e},y.get(e)||[]]}function v(e){switch(e.type){case"HANDLER":return c.get(e.name).deserialize(e.value);case"RAW":return e.value}}function m(e,t,n){return new Promise((r=>{const a=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");e.addEventListener("message",(function t(n){n.data&&n.data.id&&n.data.id===a&&(e.removeEventListener("message",t),r(n.data))})),e.start&&e.start(),e.postMessage(Object.assign({id:a},t),n)}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eEMsRUFBSTJELEVBQUsxQyxHQUNyQyxPQUFPLElBQUlqRSxTQUFTQyxJQUNoQixNQUFNb0QsRUFlSCxJQUFJZ0QsTUFBTSxHQUNaTyxLQUFLLEdBQ0xwRCxLQUFJLElBQU1xRCxLQUFLQyxNQUFNRCxLQUFLRSxTQUFXQyxPQUFPQyxrQkFBa0J4RyxTQUFTLE1BQ3ZFeUcsS0FBSyxLQWpCTmxFLEVBQUdFLGlCQUFpQixXQUFXLFNBQVNpRSxFQUFFL0QsR0FDakNBLEVBQUcvQyxNQUFTK0MsRUFBRy9DLEtBQUtnRCxJQUFNRCxFQUFHL0MsS0FBS2dELEtBQU9BLElBRzlDTCxFQUFHNEIsb0JBQW9CLFVBQVd1QyxHQUNsQ2xILEVBQVFtRCxFQUFHL0MsVUFFWDJDLEVBQUdYLE9BQ0hXLEVBQUdYLFFBRVBXLEVBQUcyQixZQUFZN0IsT0FBT0MsT0FBTyxDQUFFTSxHQUFBQSxHQUFNc0QsR0FBTTFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFweXJvcy8uL3NyYy9Qcm9ncmFtbWluZ0xhbmd1YWdlLnRzIiwid2VicGFjazovL3BhcHlyb3MvLi9zcmMvQ29uc3RhbnRzLnRzIiwid2VicGFjazovL3BhcHlyb3MvLi9zcmMvQmFja2VuZC50cyIsIndlYnBhY2s6Ly9wYXB5cm9zLy4vc3JjL3V0aWwvTG9nZ2luZy50cyIsIndlYnBhY2s6Ly9wYXB5cm9zLy4vbm9kZV9tb2R1bGVzL2NvbWxpbmsvZGlzdC9lc20vY29tbGluay5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gUHJvZ3JhbW1pbmdMYW5ndWFnZSB7XG4gICAgUHl0aG9uID0gXCJQeXRob25cIixcbiAgICBKYXZhU2NyaXB0ID0gXCJKYXZhU2NyaXB0XCJcbn1cblxuZXhwb3J0IGNvbnN0IFBST0dSQU1NSU5HX0xBTkdVQUdFUyA9IFtcbiAgICBQcm9ncmFtbWluZ0xhbmd1YWdlLlB5dGhvbixcbiAgICBQcm9ncmFtbWluZ0xhbmd1YWdlLkphdmFTY3JpcHRcbl07XG5cbmNvbnN0IExBTkdVQUdFX01BUCA9IG5ldyBNYXAoW1xuICAgIFtcInB5dGhvblwiLCBQcm9ncmFtbWluZ0xhbmd1YWdlLlB5dGhvbl0sXG4gICAgW1wiamF2YXNjcmlwdFwiLCBQcm9ncmFtbWluZ0xhbmd1YWdlLkphdmFTY3JpcHRdXG5dKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBsRnJvbVN0cmluZyhsYW5ndWFnZTogc3RyaW5nKTogUHJvZ3JhbW1pbmdMYW5ndWFnZSB7XG4gICAgY29uc3QgbGFuZ0xDID0gbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoTEFOR1VBR0VfTUFQLmhhcyhsYW5nTEMpKSB7XG4gICAgICAgIHJldHVybiBMQU5HVUFHRV9NQVAuZ2V0KGxhbmdMQykhO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbGFuZ3VhZ2U6ICR7bGFuZ3VhZ2V9YCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUHJvZ3JhbW1pbmdMYW5ndWFnZSB9IGZyb20gXCIuL1Byb2dyYW1taW5nTGFuZ3VhZ2VcIjtcblxuZXhwb3J0IGNvbnN0IE1BSU5fQVBQX0lEID0gXCJwYXB5cm9zXCI7XG5cbmV4cG9ydCBjb25zdCBPVVRQVVRfVEFfSUQgPSBcImNvZGUtb3V0cHV0LWFyZWFcIjtcbmV4cG9ydCBjb25zdCBJTlBVVF9BUkVBX1dSQVBQRVJfSUQgPSBcImNvZGUtaW5wdXQtYXJlYS13cmFwcGVyXCI7XG5leHBvcnQgY29uc3QgSU5QVVRfVEFfSUQgPSBcImNvZGUtaW5wdXQtYXJlYVwiO1xuZXhwb3J0IGNvbnN0IEVESVRPUl9XUkFQUEVSX0lEID0gXCJjb2RlLWFyZWFcIjtcblxuZXhwb3J0IGNvbnN0IFNUQVRFX1NQSU5ORVJfSUQgPSBcInN0YXRlLXNwaW5uZXJcIjtcbmV4cG9ydCBjb25zdCBBUFBMSUNBVElPTl9TVEFURV9URVhUX0lEID0gXCJhcHBsaWNhdGlvbi1zdGF0ZS10ZXh0XCI7XG5cbmV4cG9ydCBjb25zdCBSVU5fQlROX0lEID0gXCJydW4tY29kZS1idG5cIjtcbmV4cG9ydCBjb25zdCBTVE9QX0JUTl9JRCA9IFwic3RvcC1idG5cIjtcbmV4cG9ydCBjb25zdCBTRU5EX0lOUFVUX0JUTl9JRCA9IFwic2VuZC1pbnB1dC1idG5cIjtcbmV4cG9ydCBjb25zdCBTV0lUQ0hfSU5QVVRfTU9ERV9BX0lEID0gXCJzd2l0Y2gtaW5wdXQtbW9kZVwiO1xuXG5leHBvcnQgY29uc3QgUFJPR1JBTU1JTkdfTEFOR1VBR0VfU0VMRUNUX0lEID0gXCJwcm9ncmFtbWluZy1sYW5ndWFnZS1zZWxlY3RcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1BST0dSQU1NSU5HX0xBTkdVQUdFID0gUHJvZ3JhbW1pbmdMYW5ndWFnZS5QeXRob247XG5leHBvcnQgY29uc3QgRVhBTVBMRV9TRUxFQ1RfSUQgPSBcImV4YW1wbGUtc2VsZWN0XCI7XG5cbmV4cG9ydCBjb25zdCBMT0NBTEVfU0VMRUNUX0lEID0gXCJsb2NhbGUtc2VsZWN0XCI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9MT0NBTEUgPSBcIm5sXCI7XG5cbmV4cG9ydCBjb25zdCBJTlBVVF9SRUxBVElWRV9VUkwgPSBcIi9fX3BhcHlyb3NfaW5wdXRcIjtcblxuIiwiaW1wb3J0IHsgSU5QVVRfUkVMQVRJVkVfVVJMIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBQYXB5cm9zRXZlbnQgfSBmcm9tIFwiLi9QYXB5cm9zRXZlbnRcIjtcbmltcG9ydCB7IExvZ1R5cGUsIHBhcHlyb3NMb2cgfSBmcm9tIFwiLi91dGlsL0xvZ2dpbmdcIjtcblxuZnVuY3Rpb24gZ2V0SW5wdXRDYWxsYmFjayhpbnB1dFRleHRBcnJheT86IFVpbnQ4QXJyYXksIGlucHV0TWV0YURhdGE/OiBJbnQzMkFycmF5KTogKCkgPT4gc3RyaW5nIHtcbiAgICBpZiAoaW5wdXRUZXh0QXJyYXkgJiYgaW5wdXRNZXRhRGF0YSkge1xuICAgICAgICBjb25zdCB0ZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoQXRvbWljcy53YWl0KGlucHV0TWV0YURhdGEsIDAsIDAsIDEwMCkgPT09IFwidGltZWQtb3V0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFweXJvc0xvZy5sb2coXCJ3YWl0aW5nIG9uIGlucHV0XCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiAoaW50ZXJydXB0QnVmZmVyWzBdID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEF0b21pY3Muc3RvcmUoaW5wdXRNZXRhRGF0YSwgMCwgMCk7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gQXRvbWljcy5leGNoYW5nZShpbnB1dE1ldGFEYXRhLCAxLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gaW5wdXRUZXh0QXJyYXkuc2xpY2UoMCwgc2l6ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGV4dERlY29kZXIuZGVjb2RlKGJ5dGVzKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIC8vIGBmYWxzZWAgbWFrZXMgdGhlIHJlcXVlc3Qgc3luY2hyb25vdXNcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgSU5QVVRfUkVMQVRJVkVfVVJMLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKG51bGwpO1xuICAgICAgICAgICAgfSB3aGlsZSAocmVxdWVzdC5zdGF0dXMgPj0gNDAwKTsgLy8gdG9kbyBiZXR0ZXIgZXJyb3IgaGFuZGxpbmdcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlVGV4dDtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYWNrZW5kIHtcbiAgICBvbkV2ZW50OiAoZTogUGFweXJvc0V2ZW50KSA9PiBhbnk7XG4gICAgcnVuSWQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgICAgIHRoaXMub25FdmVudCA9ICgpID0+IHsgfTtcbiAgICAgICAgdGhpcy5ydW5JZCA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgYmFja2VuZCwgc2V0dGluZyB1cCBhbnkgZ2xvYmFscyByZXF1aXJlZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oUGFweXJvc0V2ZW50KTp2b2lkfSBvbkV2ZW50IENhbGxiYWNrIGZvciB3aGVuIGV2ZW50cyBvY2N1clxuICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gaW5wdXRUZXh0QXJyYXkgT3B0aW9uYWwgc2hhcmVkIGJ1ZmZlciBmb3IgaW5wdXRcbiAgICAgKiBAcGFyYW0ge0ludDMyQXJyYXl9IGlucHV0TWV0YURhdGEgT3B0aW9uYWwgc2hhcmVkIGJ1ZmZlciBmb3IgbWV0YWRhdGEgYWJvdXQgaW5wdXRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBQcm9taXNlIG9mIGxhdW5jaGluZ1xuICAgICAqL1xuICAgIGxhdW5jaChvbkV2ZW50OiAoZTogUGFweXJvc0V2ZW50KSA9PiB2b2lkLFxuICAgICAgICBpbnB1dFRleHRBcnJheT86IFVpbnQ4QXJyYXksIGlucHV0TWV0YURhdGE/OiBJbnQzMkFycmF5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGlucHV0Q2FsbGJhY2sgPSBnZXRJbnB1dENhbGxiYWNrKGlucHV0VGV4dEFycmF5LCBpbnB1dE1ldGFEYXRhKTtcbiAgICAgICAgdGhpcy5vbkV2ZW50ID0gKGU6IFBhcHlyb3NFdmVudCkgPT4ge1xuICAgICAgICAgICAgZS5ydW5JZCA9IHRoaXMucnVuSWQ7XG4gICAgICAgICAgICBvbkV2ZW50KGUpO1xuICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gXCJpbnB1dFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0Q2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGFic3RyYWN0IF9ydW5Db2RlSW50ZXJuYWwoY29kZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgYW5kIHJ1biBhcmJpdHJhcnkgY29kZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIFRoZSBjb2RlIHRvIHJ1blxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBydW5JZCBUaGUgdXVpZCBmb3IgdGhpcyBleGVjdXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBQcm9taXNlIG9mIGV4ZWN1dGlvblxuICAgICAqL1xuICAgIGFzeW5jIHJ1bkNvZGUoY29kZTogc3RyaW5nLCBydW5JZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMucnVuSWQgPSBydW5JZDtcbiAgICAgICAgcGFweXJvc0xvZyhMb2dUeXBlLkRlYnVnLCBcIlJ1bm5pbmcgY29kZSBpbiB3b3JrZXI6IFwiLCBjb2RlKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl9ydW5Db2RlSW50ZXJuYWwoY29kZSk7XG4gICAgICAgICAgICBwYXB5cm9zTG9nKExvZ1R5cGUuSW1wb3J0YW50LCBcInJhbiBjb2RlOiBcIiArIGNvZGUgKyBcIiBhbmQgcmVjZWl2ZWQ6IFwiLCBkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uRXZlbnQoeyB0eXBlOiBcInN1Y2Nlc3NcIiwgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksIHJ1bklkOiBydW5JZCB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JTdHJpbmcgPVxuICAgICAgICAgICAgICAgIHR5cGVvZiAoZXJyb3IpICE9PSBcInN0cmluZ1wiICYmIFwidG9TdHJpbmdcIiBpbiBlcnJvciA/XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLnRvU3RyaW5nKCkgOlxuICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gICAgICAgICAgICBwYXB5cm9zTG9nKExvZ1R5cGUuRXJyb3IsIFwiRXJyb3IgZHVyaW5nIGV4ZWN1dGlvbjogXCIsIGVycm9yLCBlcnJvclN0cmluZyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vbkV2ZW50KHsgdHlwZTogXCJlcnJvclwiLCBkYXRhOiBlcnJvclN0cmluZywgcnVuSWQ6IHJ1bklkIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGVudW0gTG9nVHlwZSB7XG4gICAgRGVidWcsIEVycm9yLCBJbXBvcnRhbnRcbn1cblxuY29uc3QgRU5WSVJPTk1FTlQ6IHN0cmluZyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8IFwiZGV2ZWxvcG1lbnRcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXB5cm9zTG9nKGxvZ1R5cGU6IExvZ1R5cGUsIC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgY29uc3QgZG9Mb2cgPSBFTlZJUk9OTUVOVCAhPT0gXCJwcm9kdWN0aW9uXCIgfHwgbG9nVHlwZSAhPT0gTG9nVHlwZS5EZWJ1ZztcbiAgICBpZiAoZG9Mb2cpIHtcbiAgICAgICAgaWYgKGxvZ1R5cGUgPT09IExvZ1R5cGUuRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IHByb3h5TWFya2VyID0gU3ltYm9sKFwiQ29tbGluay5wcm94eVwiKTtcclxuY29uc3QgY3JlYXRlRW5kcG9pbnQgPSBTeW1ib2woXCJDb21saW5rLmVuZHBvaW50XCIpO1xyXG5jb25zdCByZWxlYXNlUHJveHkgPSBTeW1ib2woXCJDb21saW5rLnJlbGVhc2VQcm94eVwiKTtcclxuY29uc3QgdGhyb3dNYXJrZXIgPSBTeW1ib2woXCJDb21saW5rLnRocm93blwiKTtcclxuY29uc3QgaXNPYmplY3QgPSAodmFsKSA9PiAodHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIiAmJiB2YWwgIT09IG51bGwpIHx8IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIjtcclxuLyoqXHJcbiAqIEludGVybmFsIHRyYW5zZmVyIGhhbmRsZSB0byBoYW5kbGUgb2JqZWN0cyBtYXJrZWQgdG8gcHJveHkuXHJcbiAqL1xyXG5jb25zdCBwcm94eVRyYW5zZmVySGFuZGxlciA9IHtcclxuICAgIGNhbkhhbmRsZTogKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiB2YWxbcHJveHlNYXJrZXJdLFxyXG4gICAgc2VyaWFsaXplKG9iaikge1xyXG4gICAgICAgIGNvbnN0IHsgcG9ydDEsIHBvcnQyIH0gPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcclxuICAgICAgICBleHBvc2Uob2JqLCBwb3J0MSk7XHJcbiAgICAgICAgcmV0dXJuIFtwb3J0MiwgW3BvcnQyXV07XHJcbiAgICB9LFxyXG4gICAgZGVzZXJpYWxpemUocG9ydCkge1xyXG4gICAgICAgIHBvcnQuc3RhcnQoKTtcclxuICAgICAgICByZXR1cm4gd3JhcChwb3J0KTtcclxuICAgIH0sXHJcbn07XHJcbi8qKlxyXG4gKiBJbnRlcm5hbCB0cmFuc2ZlciBoYW5kbGVyIHRvIGhhbmRsZSB0aHJvd24gZXhjZXB0aW9ucy5cclxuICovXHJcbmNvbnN0IHRocm93VHJhbnNmZXJIYW5kbGVyID0ge1xyXG4gICAgY2FuSGFuZGxlOiAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSAmJiB0aHJvd01hcmtlciBpbiB2YWx1ZSxcclxuICAgIHNlcmlhbGl6ZSh7IHZhbHVlIH0pIHtcclxuICAgICAgICBsZXQgc2VyaWFsaXplZDtcclxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICBzZXJpYWxpemVkID0ge1xyXG4gICAgICAgICAgICAgICAgaXNFcnJvcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogdmFsdWUubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB2YWx1ZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrOiB2YWx1ZS5zdGFjayxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXJpYWxpemVkID0geyBpc0Vycm9yOiBmYWxzZSwgdmFsdWUgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtzZXJpYWxpemVkLCBbXV07XHJcbiAgICB9LFxyXG4gICAgZGVzZXJpYWxpemUoc2VyaWFsaXplZCkge1xyXG4gICAgICAgIGlmIChzZXJpYWxpemVkLmlzRXJyb3IpIHtcclxuICAgICAgICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihuZXcgRXJyb3Ioc2VyaWFsaXplZC52YWx1ZS5tZXNzYWdlKSwgc2VyaWFsaXplZC52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IHNlcmlhbGl6ZWQudmFsdWU7XHJcbiAgICB9LFxyXG59O1xyXG4vKipcclxuICogQWxsb3dzIGN1c3RvbWl6aW5nIHRoZSBzZXJpYWxpemF0aW9uIG9mIGNlcnRhaW4gdmFsdWVzLlxyXG4gKi9cclxuY29uc3QgdHJhbnNmZXJIYW5kbGVycyA9IG5ldyBNYXAoW1xyXG4gICAgW1wicHJveHlcIiwgcHJveHlUcmFuc2ZlckhhbmRsZXJdLFxyXG4gICAgW1widGhyb3dcIiwgdGhyb3dUcmFuc2ZlckhhbmRsZXJdLFxyXG5dKTtcclxuZnVuY3Rpb24gZXhwb3NlKG9iaiwgZXAgPSBzZWxmKSB7XHJcbiAgICBlcC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbiBjYWxsYmFjayhldikge1xyXG4gICAgICAgIGlmICghZXYgfHwgIWV2LmRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IGlkLCB0eXBlLCBwYXRoIH0gPSBPYmplY3QuYXNzaWduKHsgcGF0aDogW10gfSwgZXYuZGF0YSk7XHJcbiAgICAgICAgY29uc3QgYXJndW1lbnRMaXN0ID0gKGV2LmRhdGEuYXJndW1lbnRMaXN0IHx8IFtdKS5tYXAoZnJvbVdpcmVWYWx1ZSk7XHJcbiAgICAgICAgbGV0IHJldHVyblZhbHVlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHBhdGguc2xpY2UoMCwgLTEpLnJlZHVjZSgob2JqLCBwcm9wKSA9PiBvYmpbcHJvcF0sIG9iaik7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gcGF0aC5yZWR1Y2UoKG9iaiwgcHJvcCkgPT4gb2JqW3Byb3BdLCBvYmopO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJHRVRcIiAvKiBHRVQgKi86XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHJhd1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTRVRcIiAvKiBTRVQgKi86XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRbcGF0aC5zbGljZSgtMSlbMF1dID0gZnJvbVdpcmVWYWx1ZShldi5kYXRhLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJBUFBMWVwiIC8qIEFQUExZICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSByYXdWYWx1ZS5hcHBseShwYXJlbnQsIGFyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkNPTlNUUlVDVFwiIC8qIENPTlNUUlVDVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbmV3IHJhd1ZhbHVlKC4uLmFyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gcHJveHkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJFTkRQT0lOVFwiIC8qIEVORFBPSU5UICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBwb3J0MSwgcG9ydDIgfSA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvc2Uob2JqLCBwb3J0Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gdHJhbnNmZXIocG9ydDEsIFtwb3J0MV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSRUxFQVNFXCIgLyogUkVMRUFTRSAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHsgdmFsdWUsIFt0aHJvd01hcmtlcl06IDAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHJldHVyblZhbHVlKVxyXG4gICAgICAgICAgICAuY2F0Y2goKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlLCBbdGhyb3dNYXJrZXJdOiAwIH07XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKHJldHVyblZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IFt3aXJlVmFsdWUsIHRyYW5zZmVyYWJsZXNdID0gdG9XaXJlVmFsdWUocmV0dXJuVmFsdWUpO1xyXG4gICAgICAgICAgICBlcC5wb3N0TWVzc2FnZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHdpcmVWYWx1ZSksIHsgaWQgfSksIHRyYW5zZmVyYWJsZXMpO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJSRUxFQVNFXCIgLyogUkVMRUFTRSAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gZGV0YWNoIGFuZCBkZWFjdGl2ZSBhZnRlciBzZW5kaW5nIHJlbGVhc2UgcmVzcG9uc2UgYWJvdmUuXHJcbiAgICAgICAgICAgICAgICBlcC5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICBjbG9zZUVuZFBvaW50KGVwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoZXAuc3RhcnQpIHtcclxuICAgICAgICBlcC5zdGFydCgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzTWVzc2FnZVBvcnQoZW5kcG9pbnQpIHtcclxuICAgIHJldHVybiBlbmRwb2ludC5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIk1lc3NhZ2VQb3J0XCI7XHJcbn1cclxuZnVuY3Rpb24gY2xvc2VFbmRQb2ludChlbmRwb2ludCkge1xyXG4gICAgaWYgKGlzTWVzc2FnZVBvcnQoZW5kcG9pbnQpKVxyXG4gICAgICAgIGVuZHBvaW50LmNsb3NlKCk7XHJcbn1cclxuZnVuY3Rpb24gd3JhcChlcCwgdGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUHJveHkoZXAsIFtdLCB0YXJnZXQpO1xyXG59XHJcbmZ1bmN0aW9uIHRocm93SWZQcm94eVJlbGVhc2VkKGlzUmVsZWFzZWQpIHtcclxuICAgIGlmIChpc1JlbGVhc2VkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJveHkgaGFzIGJlZW4gcmVsZWFzZWQgYW5kIGlzIG5vdCB1c2VhYmxlXCIpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVByb3h5KGVwLCBwYXRoID0gW10sIHRhcmdldCA9IGZ1bmN0aW9uICgpIHsgfSkge1xyXG4gICAgbGV0IGlzUHJveHlSZWxlYXNlZCA9IGZhbHNlO1xyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LCB7XHJcbiAgICAgICAgZ2V0KF90YXJnZXQsIHByb3ApIHtcclxuICAgICAgICAgICAgdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNQcm94eVJlbGVhc2VkKTtcclxuICAgICAgICAgICAgaWYgKHByb3AgPT09IHJlbGVhc2VQcm94eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlJFTEVBU0VcIiAvKiBSRUxFQVNFICovLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VFbmRQb2ludChlcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJveHlSZWxlYXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwcm9wID09PSBcInRoZW5cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdGhlbjogKCkgPT4gcHJveHkgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJHRVRcIiAvKiBHRVQgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aC5tYXAoKHApID0+IHAudG9TdHJpbmcoKSksXHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZyb21XaXJlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHIudGhlbi5iaW5kKHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVQcm94eShlcCwgWy4uLnBhdGgsIHByb3BdKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldChfdGFyZ2V0LCBwcm9wLCByYXdWYWx1ZSkge1xyXG4gICAgICAgICAgICB0aHJvd0lmUHJveHlSZWxlYXNlZChpc1Byb3h5UmVsZWFzZWQpO1xyXG4gICAgICAgICAgICAvLyBGSVhNRTogRVM2IFByb3h5IEhhbmRsZXIgYHNldGAgbWV0aG9kcyBhcmUgc3VwcG9zZWQgdG8gcmV0dXJuIGFcclxuICAgICAgICAgICAgLy8gYm9vbGVhbi4gVG8gc2hvdyBnb29kIHdpbGwsIHdlIHJldHVybiB0cnVlIGFzeW5jaHJvbm91c2x5IMKvXFxfKOODhClfL8KvXHJcbiAgICAgICAgICAgIGNvbnN0IFt2YWx1ZSwgdHJhbnNmZXJhYmxlc10gPSB0b1dpcmVWYWx1ZShyYXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlNFVFwiIC8qIFNFVCAqLyxcclxuICAgICAgICAgICAgICAgIHBhdGg6IFsuLi5wYXRoLCBwcm9wXS5tYXAoKHApID0+IHAudG9TdHJpbmcoKSksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgfSwgdHJhbnNmZXJhYmxlcykudGhlbihmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFwcGx5KF90YXJnZXQsIF90aGlzQXJnLCByYXdBcmd1bWVudExpc3QpIHtcclxuICAgICAgICAgICAgdGhyb3dJZlByb3h5UmVsZWFzZWQoaXNQcm94eVJlbGVhc2VkKTtcclxuICAgICAgICAgICAgY29uc3QgbGFzdCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKGxhc3QgPT09IGNyZWF0ZUVuZHBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiRU5EUE9JTlRcIiAvKiBFTkRQT0lOVCAqLyxcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gV2UganVzdCBwcmV0ZW5kIHRoYXQgYGJpbmQoKWAgZGlkbuKAmXQgaGFwcGVuLlxyXG4gICAgICAgICAgICBpZiAobGFzdCA9PT0gXCJiaW5kXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVQcm94eShlcCwgcGF0aC5zbGljZSgwLCAtMSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IFthcmd1bWVudExpc3QsIHRyYW5zZmVyYWJsZXNdID0gcHJvY2Vzc0FyZ3VtZW50cyhyYXdBcmd1bWVudExpc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJBUFBMWVwiIC8qIEFQUExZICovLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aC5tYXAoKHApID0+IHAudG9TdHJpbmcoKSksXHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudExpc3QsXHJcbiAgICAgICAgICAgIH0sIHRyYW5zZmVyYWJsZXMpLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb25zdHJ1Y3QoX3RhcmdldCwgcmF3QXJndW1lbnRMaXN0KSB7XHJcbiAgICAgICAgICAgIHRocm93SWZQcm94eVJlbGVhc2VkKGlzUHJveHlSZWxlYXNlZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IFthcmd1bWVudExpc3QsIHRyYW5zZmVyYWJsZXNdID0gcHJvY2Vzc0FyZ3VtZW50cyhyYXdBcmd1bWVudExpc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJDT05TVFJVQ1RcIiAvKiBDT05TVFJVQ1QgKi8sXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLm1hcCgocCkgPT4gcC50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50TGlzdCxcclxuICAgICAgICAgICAgfSwgdHJhbnNmZXJhYmxlcykudGhlbihmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcHJveHk7XHJcbn1cclxuZnVuY3Rpb24gbXlGbGF0KGFycikge1xyXG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGFycik7XHJcbn1cclxuZnVuY3Rpb24gcHJvY2Vzc0FyZ3VtZW50cyhhcmd1bWVudExpc3QpIHtcclxuICAgIGNvbnN0IHByb2Nlc3NlZCA9IGFyZ3VtZW50TGlzdC5tYXAodG9XaXJlVmFsdWUpO1xyXG4gICAgcmV0dXJuIFtwcm9jZXNzZWQubWFwKCh2KSA9PiB2WzBdKSwgbXlGbGF0KHByb2Nlc3NlZC5tYXAoKHYpID0+IHZbMV0pKV07XHJcbn1cclxuY29uc3QgdHJhbnNmZXJDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XHJcbmZ1bmN0aW9uIHRyYW5zZmVyKG9iaiwgdHJhbnNmZXJzKSB7XHJcbiAgICB0cmFuc2ZlckNhY2hlLnNldChvYmosIHRyYW5zZmVycyk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcbmZ1bmN0aW9uIHByb3h5KG9iaikge1xyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqLCB7IFtwcm94eU1hcmtlcl06IHRydWUgfSk7XHJcbn1cclxuZnVuY3Rpb24gd2luZG93RW5kcG9pbnQodywgY29udGV4dCA9IHNlbGYsIHRhcmdldE9yaWdpbiA9IFwiKlwiKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBvc3RNZXNzYWdlOiAobXNnLCB0cmFuc2ZlcmFibGVzKSA9PiB3LnBvc3RNZXNzYWdlKG1zZywgdGFyZ2V0T3JpZ2luLCB0cmFuc2ZlcmFibGVzKSxcclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIuYmluZChjb250ZXh0KSxcclxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBjb250ZXh0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYmluZChjb250ZXh0KSxcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gdG9XaXJlVmFsdWUodmFsdWUpIHtcclxuICAgIGZvciAoY29uc3QgW25hbWUsIGhhbmRsZXJdIG9mIHRyYW5zZmVySGFuZGxlcnMpIHtcclxuICAgICAgICBpZiAoaGFuZGxlci5jYW5IYW5kbGUodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFtzZXJpYWxpemVkVmFsdWUsIHRyYW5zZmVyYWJsZXNdID0gaGFuZGxlci5zZXJpYWxpemUodmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiSEFORExFUlwiIC8qIEhBTkRMRVIgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VyaWFsaXplZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRyYW5zZmVyYWJsZXMsXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiUkFXXCIgLyogUkFXICovLFxyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRyYW5zZmVyQ2FjaGUuZ2V0KHZhbHVlKSB8fCBbXSxcclxuICAgIF07XHJcbn1cclxuZnVuY3Rpb24gZnJvbVdpcmVWYWx1ZSh2YWx1ZSkge1xyXG4gICAgc3dpdGNoICh2YWx1ZS50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcIkhBTkRMRVJcIiAvKiBIQU5ETEVSICovOlxyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmZXJIYW5kbGVycy5nZXQodmFsdWUubmFtZSkuZGVzZXJpYWxpemUodmFsdWUudmFsdWUpO1xyXG4gICAgICAgIGNhc2UgXCJSQVdcIiAvKiBSQVcgKi86XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS52YWx1ZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCBtc2csIHRyYW5zZmVycykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBnZW5lcmF0ZVVVSUQoKTtcclxuICAgICAgICBlcC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbiBsKGV2KSB7XHJcbiAgICAgICAgICAgIGlmICghZXYuZGF0YSB8fCAhZXYuZGF0YS5pZCB8fCBldi5kYXRhLmlkICE9PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGwpO1xyXG4gICAgICAgICAgICByZXNvbHZlKGV2LmRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChlcC5zdGFydCkge1xyXG4gICAgICAgICAgICBlcC5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlcC5wb3N0TWVzc2FnZShPYmplY3QuYXNzaWduKHsgaWQgfSwgbXNnKSwgdHJhbnNmZXJzKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpIHtcclxuICAgIHJldHVybiBuZXcgQXJyYXkoNClcclxuICAgICAgICAuZmlsbCgwKVxyXG4gICAgICAgIC5tYXAoKCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpLnRvU3RyaW5nKDE2KSlcclxuICAgICAgICAuam9pbihcIi1cIik7XHJcbn1cblxuZXhwb3J0IHsgY3JlYXRlRW5kcG9pbnQsIGV4cG9zZSwgcHJveHksIHByb3h5TWFya2VyLCByZWxlYXNlUHJveHksIHRyYW5zZmVyLCB0cmFuc2ZlckhhbmRsZXJzLCB3aW5kb3dFbmRwb2ludCwgd3JhcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbGluay5tanMubWFwXG4iXSwibmFtZXMiOlsiUHJvZ3JhbW1pbmdMYW5ndWFnZSIsIlB5dGhvbiIsIkphdmFTY3JpcHQiLCJNYXAiLCJ0aGlzIiwib25FdmVudCIsInJ1bklkIiwibGF1bmNoIiwiaW5wdXRUZXh0QXJyYXkiLCJpbnB1dE1ldGFEYXRhIiwiaW5wdXRDYWxsYmFjayIsIlRleHREZWNvZGVyIiwiQXRvbWljcyIsIndhaXQiLCJzdG9yZSIsInNpemUiLCJleGNoYW5nZSIsImJ5dGVzIiwic2xpY2UiLCJkZWNvZGUiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsImdldElucHV0Q2FsbGJhY2siLCJlIiwidHlwZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicnVuQ29kZSIsImNvZGUiLCJfcnVuQ29kZUludGVybmFsIiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvclN0cmluZyIsInRvU3RyaW5nIiwiTG9nVHlwZSIsInBhcHlyb3NMb2ciLCJsb2dUeXBlIiwiZG9Mb2ciLCJEZWJ1ZyIsIkVycm9yIiwiY29uc29sZSIsImVycm9yIiwiYXJncyIsImxvZyIsInByb3h5TWFya2VyIiwiU3ltYm9sIiwiY3JlYXRlRW5kcG9pbnQiLCJyZWxlYXNlUHJveHkiLCJ0aHJvd01hcmtlciIsImlzT2JqZWN0IiwidmFsIiwidHJhbnNmZXJIYW5kbGVycyIsImNhbkhhbmRsZSIsInNlcmlhbGl6ZSIsIm9iaiIsInBvcnQxIiwicG9ydDIiLCJNZXNzYWdlQ2hhbm5lbCIsImV4cG9zZSIsImRlc2VyaWFsaXplIiwicG9ydCIsInN0YXJ0IiwiY3JlYXRlUHJveHkiLCJ0YXJnZXQiLCJ2YWx1ZSIsInNlcmlhbGl6ZWQiLCJpc0Vycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJzdGFjayIsIk9iamVjdCIsImFzc2lnbiIsImVwIiwic2VsZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYWxsYmFjayIsImV2IiwiaWQiLCJwYXRoIiwiYXJndW1lbnRMaXN0IiwibWFwIiwiZnJvbVdpcmVWYWx1ZSIsInJldHVyblZhbHVlIiwicGFyZW50IiwicmVkdWNlIiwicHJvcCIsInJhd1ZhbHVlIiwiYXBwbHkiLCJwcm94eSIsInRyYW5zZmVycyIsInRyYW5zZmVyQ2FjaGUiLCJzZXQiLCJ0cmFuc2ZlciIsInVuZGVmaW5lZCIsImNhdGNoIiwidGhlbiIsIndpcmVWYWx1ZSIsInRyYW5zZmVyYWJsZXMiLCJ0b1dpcmVWYWx1ZSIsInBvc3RNZXNzYWdlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsb3NlRW5kUG9pbnQiLCJlbmRwb2ludCIsImNvbnN0cnVjdG9yIiwiaXNNZXNzYWdlUG9ydCIsImNsb3NlIiwidGhyb3dJZlByb3h5UmVsZWFzZWQiLCJpc1JlbGVhc2VkIiwiaXNQcm94eVJlbGVhc2VkIiwiUHJveHkiLCJnZXQiLCJfdGFyZ2V0IiwicmVxdWVzdFJlc3BvbnNlTWVzc2FnZSIsInAiLCJsZW5ndGgiLCJyIiwiYmluZCIsIl90aGlzQXJnIiwicmF3QXJndW1lbnRMaXN0IiwibGFzdCIsInByb2Nlc3NBcmd1bWVudHMiLCJjb25zdHJ1Y3QiLCJwcm9jZXNzZWQiLCJ2IiwiYXJyIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjb25jYXQiLCJXZWFrTWFwIiwiaGFuZGxlciIsInNlcmlhbGl6ZWRWYWx1ZSIsIm1zZyIsImZpbGwiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiam9pbiIsImwiXSwic291cmNlUm9vdCI6IiJ9