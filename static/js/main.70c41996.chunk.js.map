{"version":3,"sources":["BackendManager.ts","workers/python/index.ts","workers/javascript/index.ts","Papyros.ts","Constants.ts","index.ts"],"names":["BACKEND_MAP","Map","getBackend","language","worker","toLowerCase","Worker","Error","backend","wrap","set","stopBackend","a","has","get","terminate","releaseProxy","delete","toString","module","exports","codeArea","document","getElementById","lineNr","inputArea","outputArea","languageSelect","runButton","terminateButton","awaitingInput","encoder","TextEncoder","inputTextArray","undefined","inputMetaData","fetchInputUrl","location","pathname","initBackend","disabled","value","launch","proxy","e","console","log","type","data","onInput","onError","onMessage","then","sendInput","lines","split","length","line","fetch","method","body","JSON","stringify","encoded","encode","Atomics","store","SharedArrayBuffer","navigator","serviceWorker","register","scope","URLSearchParams","window","search","onkeydown","key","addEventListener","hidden","runCode","catch","finally","Papyros"],"mappings":"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","file":"static/js/main.70c41996.chunk.js","sourcesContent":["import { releaseProxy, Remote, wrap } from 'comlink';\nimport { Backend } from \"./Backend\";\n\nconst BACKEND_MAP: Map<Remote<Backend>, Worker> = new Map();\n\nexport function getBackend(language: string): Remote<Backend> {\n    language = language.toLowerCase();\n    let worker;\n    switch(language){\n        // Requires switch to have actual string constants and make webpack bundle the workers\n        case \"python\": {\n            worker = new Worker(\"./workers/python\", {\n                type: 'module',\n            });\n            break;\n        }\n        \n        case \"javascript\": {\n            worker = new Worker(\"./workers/javascript\", {\n                type: 'module',\n            });\n            break;\n        }\n        \n        default: {\n            throw new Error(`${language} is not yet supported.`);\n        }\n    }\n    const backend =  wrap<Backend>(worker);\n    BACKEND_MAP.set(backend, worker);\n    return backend;\n}\n\nexport async function stopBackend(backend: Remote<Backend>){\n    if(BACKEND_MAP.has(backend)){\n        const toStop = BACKEND_MAP.get(backend)!;\n        toStop.terminate();\n        backend[releaseProxy]();\n        BACKEND_MAP.delete(backend);\n    } else {\n        throw new Error(`Unknown backend supplied for language ${backend.toString()}`);\n    }\n}","module.exports = __webpack_public_path__ + \"static/js/0.8ed1cb57.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/1.4893d024.chunk.worker.js\"","import { proxy, Remote } from \"comlink\";\nimport { Backend} from \"./Backend\";\nimport { getBackend, stopBackend } from \"./BackendManager\";\nimport { CODE_TA_ID, DEFAULT_PROGRAMMING_LANGUAGE, INPUT_TA_ID, LANGUAGE_SELECT_ID, OUTPUT_TA_ID, RUN_BTN_ID, TERMINATE_BTN_ID } from \"./Constants\";\nimport { PapyrosEvent } from \"./PapyrosEvent\";\n\nexport function Papyros(){\n    let backend: Remote<Backend>;\n\n    // textareas\n    const codeArea = document.getElementById(CODE_TA_ID) as HTMLInputElement;\n    let lineNr = 0;\n    const inputArea = document.getElementById(INPUT_TA_ID) as HTMLInputElement;\n    const outputArea = document.getElementById(OUTPUT_TA_ID) as HTMLInputElement;\n\n    // selects\n    const languageSelect = document.getElementById(LANGUAGE_SELECT_ID) as HTMLSelectElement;\n\n    // buttons\n    const runButton = document.getElementById(RUN_BTN_ID) as HTMLButtonElement;\n    const terminateButton = document.getElementById(TERMINATE_BTN_ID) as HTMLButtonElement;\n\n    // Input handling\n    let awaitingInput = false;\n    const encoder = new TextEncoder();\n\n    // shared memory\n    let inputTextArray: Uint8Array | undefined = undefined;\n        // 2 Int32s: index 0 indicates whether data is written, index 1 denotes length of the string\n    let inputMetaData: Int32Array | undefined = undefined;\n    const fetchInputUrl = `${document.location.pathname}input`\n    if(typeof SharedArrayBuffer !== \"undefined\"){\n        //inputTextArray = new Uint8Array(new SharedArrayBuffer(Uint8Array.BYTES_PER_ELEMENT * 1024));\n        //inputMetaData = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 2));\n        //let interruptBuffer = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT));\n        navigator.serviceWorker.register(\"./inputServiceWorker.js\", { scope: \"\" });\n    } else if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.register(\"./inputServiceWorker.js\", { scope: \"\" });\n    } else {\n        console.log(typeof SharedArrayBuffer);\n        console.log(navigator);\n        console.log(navigator.serviceWorker);\n        console.log(\"Your browser is unsupported. Please use a modern version of Chrome, Safari, Firefox, ...\");\n        //document.getElementById(\"papyros\")!.innerHTML = \"Your browser is unsupported. Please use a modern version of Chrome, Safari, Firefox, ...\";\n    }\n\n\n    function init(): void {\n        const language = new URLSearchParams(window.location.search).get(\"language\") || DEFAULT_PROGRAMMING_LANGUAGE;\n        initBackend(language);\n        initTextAreas();\n        initButtons();\n        initLanguageSelect();\n    }\n\n    function initBackend(language?: string): Promise<void> {\n        runButton.disabled = true;\n        if(language){\n            languageSelect.value = language;\n        }\n        backend = getBackend(languageSelect.value);\n        return backend.launch(proxy(e => onMessage(e)), inputTextArray, inputMetaData)\n                .then(() => {runButton.disabled = false});\n    }\n\n    function initLanguageSelect(): void {\n        languageSelect.addEventListener(\"change\",\n         () =>  stopBackend(backend).finally(() => initBackend())\n        );\n    }\n\n    function initTextAreas(): void {\n        inputArea.onkeydown = (e) => {\n            console.log(\"Key down in inputArea\", e);\n            if(awaitingInput && e.key.toLowerCase() === \"enter\"){\n                console.log(\"Pressed enter! Sending input to user\");\n                sendInput();\n            }\n        }\n    }\n\n    function onError(e: PapyrosEvent): void {\n        console.log(\"Got error in Papyros: \", e);\n        // todo prettify errors\n        outputArea.value += e.data;\n    }\n\n    async function sendInput(){\n        console.log(\"Handling send Input in Papyros\");\n        const lines = inputArea.value.split(\"\\n\");\n        if(lines.length > lineNr && lines[lineNr]){\n            console.log(\"Sending input to user: \" + lines[lineNr]);\n            const line = lines[lineNr];\n            if(!inputMetaData || !inputTextArray){\n               await fetch(fetchInputUrl, {method: \"POST\", body: JSON.stringify({\"input\": line})});\n            } else {\n                const encoded = encoder.encode(lines[lineNr]);\n                inputTextArray.set(encoded);\n                Atomics.store(inputMetaData, 1, encoded.length);\n                Atomics.store(inputMetaData, 0, 1);\n            }\n            lineNr += 1;\n            awaitingInput = false;\n            return true;\n        } else {\n            console.log(\"Had no input to send, still waiting!\");\n            return false;\n        }\n    }\n\n    async function onInput(e: PapyrosEvent): Promise<void> {\n        console.log(\"Received onInput event in Papyros: \", e);\n        if(!await sendInput()){\n            // todo render something based on the event\n            awaitingInput = true;\n            console.log(\"User needs to enter input before code can continue\");\n        }\n    }\n\n    function onMessage(e: PapyrosEvent): void {\n        console.log(\"received event in onMessage\", e);\n        if(e.type === \"output\"){\n            outputArea.value += e.data;\n        } else if(e.type === \"input\"){\n            onInput(e);\n        } else if(e.type === \"error\"){\n            onError(e);\n        }\n    }\n\n    function runCode(): Promise<void> {\n        runButton.disabled = true;\n        lineNr = 0;\n        outputArea.value = \"\";\n        terminateButton.hidden = false;\n        console.log(\"Running code in Papyros, sending to backend\");\n        return backend.runCode(codeArea.value)\n            .catch(onError)\n            .finally(() => {\n                terminateButton.hidden = true;\n                runButton.disabled = false;\n            });\n    }\n\n    function terminate(): Promise<void> {\n        console.log(\"Called terminate, stopping backend!\");\n        terminateButton.hidden = true;\n        return stopBackend(backend).then(() => initBackend());\n    }\n\n    function initButtons(): void {\n        /*runButton.addEventListener(\"click\", () => {\n            //sendInput();\n            fetch(\"/input\").then(r => console.log(\"Got result from GET /input\", r));\n        });*/\n        runButton.addEventListener(\"click\", () => runCode());\n        terminateButton.addEventListener(\"click\", () => terminate());\n    }\n\n    init();\n}","export const OUTPUT_TA_ID = \"code-output-area\";\nexport const INPUT_TA_ID = \"code-input-area\";\nexport const CODE_TA_ID = \"code-area\";\n\nexport const RUN_BTN_ID = \"run-code-btn\";\nexport const TERMINATE_BTN_ID = \"terminate-btn\";\n\nexport const LANGUAGE_SELECT_ID = \"language-select\";\n\nexport const DEFAULT_PROGRAMMING_LANGUAGE = /*\"javascript\"*/ \"python\";\n","import 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { Papyros } from './Papyros';\n\nPapyros();"],"sourceRoot":""}