{"version":3,"sources":["BackendManager.ts","workers/python/index.ts","workers/javascript/index.ts","util/Logging.ts","Constants.ts","Papyros.ts","index.ts"],"names":["BACKEND_MAP","Map","getBackend","language","worker","toLowerCase","Worker","Error","backend","wrap","set","stopBackend","a","has","get","terminate","releaseProxy","delete","toString","module","exports","LogType","INPUT_RELATIVE_URL","papyrosLog","logType","doLog","Debug","args","console","error","log","Papyros","inputTextArray","inputMetaData","codeArea","document","getElementById","lineNr","inputArea","outputArea","languageSelect","runButton","terminateButton","awaitingInput","encoder","TextEncoder","initBackend","disabled","value","launch","proxy","e","type","data","onInput","onError","onMessage","then","sendInput","lines","split","length","line","fetch","method","body","JSON","stringify","encoded","encode","Atomics","store","URLSearchParams","window","location","search","onkeydown","key","addEventListener","hidden","runCode","catch","finally","RELOAD_STORAGE_KEY","startPapyros","undefined","SharedArrayBuffer","Important","Uint8Array","BYTES_PER_ELEMENT","Int32Array","localStorage","getItem","removeItem","navigator","setItem","serviceWorker","register","scope","reload","innerHTML"],"mappings":"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","file":"static/js/main.ca3a60ba.chunk.js","sourcesContent":["import { releaseProxy, Remote, wrap } from 'comlink';\nimport { Backend } from \"./Backend\";\n\nconst BACKEND_MAP: Map<Remote<Backend>, Worker> = new Map();\n\nexport function getBackend(language: string): Remote<Backend> {\n    language = language.toLowerCase();\n    let worker;\n    switch(language){\n        // Requires switch to have actual string constants and make webpack bundle the workers\n        case \"python\": {\n            worker = new Worker(\"./workers/python\", {\n                type: 'module',\n            });\n            break;\n        }\n        \n        case \"javascript\": {\n            worker = new Worker(\"./workers/javascript\", {\n                type: 'module',\n            });\n            break;\n        }\n        \n        default: {\n            throw new Error(`${language} is not yet supported.`);\n        }\n    }\n    const backend =  wrap<Backend>(worker);\n    BACKEND_MAP.set(backend, worker);\n    return backend;\n}\n\nexport async function stopBackend(backend: Remote<Backend>){\n    if(BACKEND_MAP.has(backend)){\n        const toStop = BACKEND_MAP.get(backend)!;\n        toStop.terminate();\n        backend[releaseProxy]();\n        BACKEND_MAP.delete(backend);\n    } else {\n        throw new Error(`Unknown backend supplied for language ${backend.toString()}`);\n    }\n}","module.exports = __webpack_public_path__ + \"static/js/0.c847ba33.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/1.59658b87.chunk.worker.js\"","export enum LogType {\n    Debug, Error, Important \n}\n\nconst ENVIRONMENT: string = process.env.NODE_ENV || 'development';\nexport function papyrosLog(logType: LogType, ...args: any[]){\n    const doLog = ENVIRONMENT !== \"production\" || logType !== LogType.Debug;\n    if(doLog){\n        if(logType === LogType.Error){\n            console.error(...args);\n        } else {\n            console.log(...args);\n        }\n    }\n}","export const MAIN_APP_ID = \"papyros\";\n\nexport const OUTPUT_TA_ID = \"code-output-area\";\nexport const INPUT_TA_ID = \"code-input-area\";\nexport const CODE_TA_ID = \"code-area\";\n\nexport const RUN_BTN_ID = \"run-code-btn\";\nexport const TERMINATE_BTN_ID = \"terminate-btn\";\n\nexport const LANGUAGE_SELECT_ID = \"language-select\";\n\nexport const DEFAULT_PROGRAMMING_LANGUAGE = /*\"javascript\"*/ \"python\";\n\nexport const INPUT_RELATIVE_URL = \"/__papyros_input\";","import { proxy, Remote } from \"comlink\";\nimport { Backend} from \"./Backend\";\nimport { getBackend, stopBackend } from \"./BackendManager\";\nimport { CODE_TA_ID, DEFAULT_PROGRAMMING_LANGUAGE, INPUT_RELATIVE_URL, INPUT_TA_ID, LANGUAGE_SELECT_ID, OUTPUT_TA_ID, RUN_BTN_ID, TERMINATE_BTN_ID } from \"./Constants\";\nimport { PapyrosEvent } from \"./PapyrosEvent\";\nimport { LogType, papyrosLog } from \"./util/Logging\";\n\nexport function Papyros(inputTextArray?: Uint8Array, inputMetaData?: Int32Array){\n    let backend: Remote<Backend>;\n\n    // textareas\n    const codeArea = document.getElementById(CODE_TA_ID) as HTMLInputElement;\n    let lineNr = 0;\n    const inputArea = document.getElementById(INPUT_TA_ID) as HTMLInputElement;\n    const outputArea = document.getElementById(OUTPUT_TA_ID) as HTMLInputElement;\n\n    // selects\n    const languageSelect = document.getElementById(LANGUAGE_SELECT_ID) as HTMLSelectElement;\n\n    // buttons\n    const runButton = document.getElementById(RUN_BTN_ID) as HTMLButtonElement;\n    const terminateButton = document.getElementById(TERMINATE_BTN_ID) as HTMLButtonElement;\n\n    // Input handling\n    let awaitingInput = false;\n    const encoder = new TextEncoder();\n\n\n    function init(): void {\n        const language = new URLSearchParams(window.location.search).get(\"language\") || DEFAULT_PROGRAMMING_LANGUAGE;\n        initBackend(language);\n        initTextAreas();\n        initButtons();\n        initLanguageSelect();\n    }\n\n    function initBackend(language?: string): Promise<void> {\n        runButton.disabled = true;\n        if(language){\n            languageSelect.value = language;\n        }\n        backend = getBackend(languageSelect.value);\n        return backend.launch(proxy(e => onMessage(e)), inputTextArray, inputMetaData)\n                .then(() => {runButton.disabled = false});\n    }\n\n    function initLanguageSelect(): void {\n        languageSelect.addEventListener(\"change\",\n         () =>  stopBackend(backend).finally(() => initBackend())\n        );\n    }\n\n    function initTextAreas(): void {\n        inputArea.onkeydown = (e) => {\n            papyrosLog(LogType.Debug, \"Key down in inputArea\", e);\n            if(awaitingInput && e.key.toLowerCase() === \"enter\"){\n                papyrosLog(LogType.Debug, \"Pressed enter! Sending input to user\");\n                sendInput();\n            }\n        }\n    }\n\n    function onError(e: PapyrosEvent): void {\n        papyrosLog(LogType.Debug, \"Got error in Papyros: \", e);\n        // todo prettify errors\n        outputArea.value += e.data;\n    }\n\n    async function sendInput(){\n        papyrosLog(LogType.Debug, \"Handling send Input in Papyros\");\n        const lines = inputArea.value.split(\"\\n\");\n        if(lines.length > lineNr && lines[lineNr]){\n            papyrosLog(LogType.Debug, \"Sending input to user: \" + lines[lineNr]);\n            const line = lines[lineNr];\n            if(!inputMetaData || !inputTextArray){\n               await fetch(INPUT_RELATIVE_URL, {method: \"POST\", body: JSON.stringify({\"input\": line})});\n            } else {\n                const encoded = encoder.encode(lines[lineNr]);\n                inputTextArray.set(encoded);\n                Atomics.store(inputMetaData, 1, encoded.length);\n                Atomics.store(inputMetaData, 0, 1);\n            }\n            lineNr += 1;\n            awaitingInput = false;\n            return true;\n        } else {\n            papyrosLog(LogType.Debug, \"Had no input to send, still waiting!\");\n            return false;\n        }\n    }\n\n    async function onInput(e: PapyrosEvent): Promise<void> {\n        papyrosLog(LogType.Debug, \"Received onInput event in Papyros: \", e);\n        if(!await sendInput()){\n            // todo render something based on the event\n            awaitingInput = true;\n            papyrosLog(LogType.Debug, \"User needs to enter input before code can continue\");\n        }\n    }\n\n    function onMessage(e: PapyrosEvent): void {\n        papyrosLog(LogType.Debug, \"received event in onMessage\", e);\n        if(e.type === \"output\"){\n            outputArea.value += e.data;\n        } else if(e.type === \"input\"){\n            onInput(e);\n        } else if(e.type === \"error\"){\n            onError(e);\n        }\n    }\n\n    function runCode(): Promise<void> {\n        runButton.disabled = true;\n        lineNr = 0;\n        outputArea.value = \"\";\n        terminateButton.hidden = false;\n        papyrosLog(LogType.Debug, \"Running code in Papyros, sending to backend\");\n        return backend.runCode(codeArea.value)\n            .catch(onError)\n            .finally(() => {\n                terminateButton.hidden = true;\n                runButton.disabled = false;\n            });\n    }\n\n    function terminate(): Promise<void> {\n        papyrosLog(LogType.Debug, \"Called terminate, stopping backend!\");\n        terminateButton.hidden = true;\n        return stopBackend(backend).then(() => initBackend());\n    }\n\n    function initButtons(): void {\n        runButton.addEventListener(\"click\", () => runCode());\n        terminateButton.addEventListener(\"click\", () => terminate());\n    }\n\n    init();\n}","import 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { MAIN_APP_ID } from './Constants';\nimport { Papyros } from './Papyros';\nimport { papyrosLog, LogType } from './util/Logging';\n\nconst RELOAD_STORAGE_KEY = \"__papyros_reloading\";\nconst SERVICE_WORKER_PATH = \"./inputServiceWorker.js\";\n\nif(window.localStorage.getItem(RELOAD_STORAGE_KEY)){\n    // We are the result of the page reload, so we can start\n    window.localStorage.removeItem(RELOAD_STORAGE_KEY);\n    startPapyros();\n} else {\n    if(typeof SharedArrayBuffer === \"undefined\"){\n        papyrosLog(LogType.Important, \"SharedArrayBuffers are not available. \");\n        if(\"serviceWorker\" in navigator){\n            papyrosLog(LogType.Important, \"Registering service worker.\");\n            // Store that we are reloading, to prevent the next load from doing all this again\n            window.localStorage.setItem(RELOAD_STORAGE_KEY, RELOAD_STORAGE_KEY);\n            navigator.serviceWorker.register(SERVICE_WORKER_PATH, { scope: \"\" })\n                // service worker adds new headers that may allow SharedArrayBuffers to be used anyway\n                .then(() => window.location.reload());\n        } else {\n            document.getElementById(MAIN_APP_ID)!.innerHTML = \"Your browser is unsupported. Please use a modern version of Chrome, Safari, Firefox, ...\";\n        }\n    } else {\n        startPapyros();\n    }\n}\n\n\nfunction startPapyros(){\n    let inputTextArray: Uint8Array | undefined = undefined;\n    let inputMetaData: Int32Array | undefined = undefined;\n    if(typeof SharedArrayBuffer !== \"undefined\"){\n        papyrosLog(LogType.Important, \"Using SharedArrayBuffers\");\n        // shared memory\n        inputTextArray = new Uint8Array(new SharedArrayBuffer(Uint8Array.BYTES_PER_ELEMENT * 1024));\n        // 2 Int32s: index 0 indicates whether data is written, index 1 denotes length of the string\n        inputMetaData = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 2));\n    } else {\n        papyrosLog(LogType.Important, \"Using serviceWorker for input\");\n    }\n\n    Papyros(inputTextArray, inputMetaData);\n}"],"sourceRoot":""}